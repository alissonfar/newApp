{"ast":null,"code":"// src/utils/export/exportDataPdf.js\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\n/**\r\n * Exporta os dados para um arquivo PDF estruturado como um extrato bancário.\r\n * Mostra a data de geração do PDF e os detalhes dos filtros aplicados (datas, tipo, pessoas, tags).\r\n *\r\n * @param {Array} data - Array de objetos (linhas filtradas) a serem exportados.\r\n * @param {Object} filterDetails - Objeto contendo detalhes dos filtros aplicados.\r\n *    Exemplo:\r\n *      {\r\n *        dataInicio: '2025-01-01',\r\n *        dataFim: '2025-02-01',\r\n *        selectedTipo: 'gasto',\r\n *        selectedPessoas: ['João', 'Maria'],\r\n *        tagFilters: { \"Categoria A\": [\"Tag1\", \"Tag2\"], \"Categoria B\": [\"Tag3\"] }\r\n *      }\r\n * @param {string} filename - Nome do arquivo PDF (padrão: 'relatorio.pdf').\r\n */\nexport function exportDataToPDF(data, filterDetails = {}, filename = 'relatorio.pdf') {\n  if (!data || data.length === 0) {\n    console.warn(\"Nenhum dado para exportar\");\n    return;\n  }\n  const doc = new jsPDF();\n\n  // 1) Título do documento\n  doc.setFontSize(16);\n  doc.text(\"Relatório de Transações\", 14, 20);\n\n  // 2) Data de geração do PDF\n  doc.setFontSize(10);\n  doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\n\n  // 3) Exibe as informações de filtro aplicadas\n  let startY = 36;\n\n  // Linha do período\n  const periodoLine = `Período: ${filterDetails.dataInicio || '-'} até ${filterDetails.dataFim || '-'}`;\n  doc.text(periodoLine, 14, startY);\n  startY += 6;\n\n  // Tipo de transação\n  const tipoLine = `Tipo: ${filterDetails.selectedTipo || 'both'}`;\n  doc.text(tipoLine, 14, startY);\n  startY += 6;\n\n  // Pessoas selecionadas\n  if (filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0) {\n    doc.text(`Pessoas: ${filterDetails.selectedPessoas.join(', ')}`, 14, startY);\n  } else {\n    doc.text(\"Pessoas: Nenhuma\", 14, startY);\n  }\n  startY += 6;\n\n  // Tags\n  if (filterDetails.tagFilters) {\n    const tagLines = [];\n    for (const [cat, tags] of Object.entries(filterDetails.tagFilters)) {\n      if (tags && tags.length > 0) {\n        // Exemplo: \"Categoria X: Tag1, Tag2\"\n        tagLines.push(`${cat}: ${tags.join(', ')}`);\n      }\n    }\n    if (tagLines.length > 0) {\n      doc.text(`Tags: ${tagLines.join(' | ')}`, 14, startY);\n    } else {\n      doc.text(\"Tags: Nenhuma\", 14, startY);\n    }\n  } else {\n    doc.text(\"Tags: Nenhuma\", 14, startY);\n  }\n  startY += 10;\n\n  // 4) Separa os dados em Gastos e Recebíveis\n  const gastos = data.filter(row => {\n    var _row$tipoPai;\n    return ((_row$tipoPai = row.tipoPai) === null || _row$tipoPai === void 0 ? void 0 : _row$tipoPai.toLowerCase()) === 'gasto';\n  });\n  const recebiveis = data.filter(row => {\n    var _row$tipoPai2;\n    return ((_row$tipoPai2 = row.tipoPai) === null || _row$tipoPai2 === void 0 ? void 0 : _row$tipoPai2.toLowerCase()) === 'recebivel';\n  });\n\n  // Função auxiliar para criar cada seção (Gastos ou Recebíveis)\n  const addSection = (titulo, rows) => {\n    if (rows.length === 0) return;\n\n    // Título da seção\n    doc.setFontSize(14);\n    doc.text(titulo, 14, startY);\n    startY += 6;\n\n    // Define colunas e prepara os dados\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\n    const linhas = rows.map(row => [new Date(row.dataPai).toLocaleDateString('pt-BR'), row.descricaoPai, row.pessoa || '', parseFloat(row.valorPagamento).toFixed(2)]);\n\n    // Cria a tabela usando autoTable\n    autoTable(doc, {\n      head: [colunas],\n      body: linhas,\n      startY: startY,\n      theme: 'grid',\n      headStyles: {\n        fillColor: [41, 128, 185]\n      },\n      styles: {\n        fontSize: 10\n      }\n    });\n\n    // Atualiza o ponto de início para a próxima seção\n    startY = doc.lastAutoTable.finalY + 10;\n  };\n\n  // 5) Adiciona as seções\n  addSection(\"Gastos\", gastos);\n  addSection(\"Recebíveis\", recebiveis);\n\n  // 6) Salva o PDF\n  doc.save(filename);\n}","map":{"version":3,"names":["jsPDF","autoTable","exportDataToPDF","data","filterDetails","filename","length","console","warn","doc","setFontSize","text","Date","toLocaleDateString","startY","periodoLine","dataInicio","dataFim","tipoLine","selectedTipo","selectedPessoas","join","tagFilters","tagLines","cat","tags","Object","entries","push","gastos","filter","row","_row$tipoPai","tipoPai","toLowerCase","recebiveis","_row$tipoPai2","addSection","titulo","rows","colunas","linhas","map","dataPai","descricaoPai","pessoa","parseFloat","valorPagamento","toFixed","head","body","theme","headStyles","fillColor","styles","fontSize","lastAutoTable","finalY","save"],"sources":["C:/Users/Alisson/Desktop/NEWAPP CONTROLE FINANCEIRO/controle-gastos-frontend/src/utils/export/exportDataPdf.js"],"sourcesContent":["// src/utils/export/exportDataPdf.js\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\n\r\n/**\r\n * Exporta os dados para um arquivo PDF estruturado como um extrato bancário.\r\n * Mostra a data de geração do PDF e os detalhes dos filtros aplicados (datas, tipo, pessoas, tags).\r\n *\r\n * @param {Array} data - Array de objetos (linhas filtradas) a serem exportados.\r\n * @param {Object} filterDetails - Objeto contendo detalhes dos filtros aplicados.\r\n *    Exemplo:\r\n *      {\r\n *        dataInicio: '2025-01-01',\r\n *        dataFim: '2025-02-01',\r\n *        selectedTipo: 'gasto',\r\n *        selectedPessoas: ['João', 'Maria'],\r\n *        tagFilters: { \"Categoria A\": [\"Tag1\", \"Tag2\"], \"Categoria B\": [\"Tag3\"] }\r\n *      }\r\n * @param {string} filename - Nome do arquivo PDF (padrão: 'relatorio.pdf').\r\n */\r\nexport function exportDataToPDF(data, filterDetails = {}, filename = 'relatorio.pdf') {\r\n  if (!data || data.length === 0) {\r\n    console.warn(\"Nenhum dado para exportar\");\r\n    return;\r\n  }\r\n\r\n  const doc = new jsPDF();\r\n\r\n  // 1) Título do documento\r\n  doc.setFontSize(16);\r\n  doc.text(\"Relatório de Transações\", 14, 20);\r\n\r\n  // 2) Data de geração do PDF\r\n  doc.setFontSize(10);\r\n  doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\r\n\r\n  // 3) Exibe as informações de filtro aplicadas\r\n  let startY = 36;\r\n\r\n  // Linha do período\r\n  const periodoLine = `Período: ${filterDetails.dataInicio || '-'} até ${filterDetails.dataFim || '-'}`;\r\n  doc.text(periodoLine, 14, startY);\r\n  startY += 6;\r\n\r\n  // Tipo de transação\r\n  const tipoLine = `Tipo: ${filterDetails.selectedTipo || 'both'}`;\r\n  doc.text(tipoLine, 14, startY);\r\n  startY += 6;\r\n\r\n  // Pessoas selecionadas\r\n  if (filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0) {\r\n    doc.text(`Pessoas: ${filterDetails.selectedPessoas.join(', ')}`, 14, startY);\r\n  } else {\r\n    doc.text(\"Pessoas: Nenhuma\", 14, startY);\r\n  }\r\n  startY += 6;\r\n\r\n  // Tags\r\n  if (filterDetails.tagFilters) {\r\n    const tagLines = [];\r\n    for (const [cat, tags] of Object.entries(filterDetails.tagFilters)) {\r\n      if (tags && tags.length > 0) {\r\n        // Exemplo: \"Categoria X: Tag1, Tag2\"\r\n        tagLines.push(`${cat}: ${tags.join(', ')}`);\r\n      }\r\n    }\r\n    if (tagLines.length > 0) {\r\n      doc.text(`Tags: ${tagLines.join(' | ')}`, 14, startY);\r\n    } else {\r\n      doc.text(\"Tags: Nenhuma\", 14, startY);\r\n    }\r\n  } else {\r\n    doc.text(\"Tags: Nenhuma\", 14, startY);\r\n  }\r\n  startY += 10;\r\n\r\n  // 4) Separa os dados em Gastos e Recebíveis\r\n  const gastos = data.filter(row => row.tipoPai?.toLowerCase() === 'gasto');\r\n  const recebiveis = data.filter(row => row.tipoPai?.toLowerCase() === 'recebivel');\r\n\r\n  // Função auxiliar para criar cada seção (Gastos ou Recebíveis)\r\n  const addSection = (titulo, rows) => {\r\n    if (rows.length === 0) return;\r\n\r\n    // Título da seção\r\n    doc.setFontSize(14);\r\n    doc.text(titulo, 14, startY);\r\n    startY += 6;\r\n\r\n    // Define colunas e prepara os dados\r\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\r\n    const linhas = rows.map(row => [\r\n      new Date(row.dataPai).toLocaleDateString('pt-BR'),\r\n      row.descricaoPai,\r\n      row.pessoa || '',\r\n      parseFloat(row.valorPagamento).toFixed(2)\r\n    ]);\r\n\r\n    // Cria a tabela usando autoTable\r\n    autoTable(doc, {\r\n      head: [colunas],\r\n      body: linhas,\r\n      startY: startY,\r\n      theme: 'grid',\r\n      headStyles: { fillColor: [41, 128, 185] },\r\n      styles: { fontSize: 10 }\r\n    });\r\n\r\n    // Atualiza o ponto de início para a próxima seção\r\n    startY = doc.lastAutoTable.finalY + 10;\r\n  };\r\n\r\n  // 5) Adiciona as seções\r\n  addSection(\"Gastos\", gastos);\r\n  addSection(\"Recebíveis\", recebiveis);\r\n\r\n  // 6) Salva o PDF\r\n  doc.save(filename);\r\n}\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,IAAI,EAAEC,aAAa,GAAG,CAAC,CAAC,EAAEC,QAAQ,GAAG,eAAe,EAAE;EACpF,IAAI,CAACF,IAAI,IAAIA,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;IAC9BC,OAAO,CAACC,IAAI,CAAC,2BAA2B,CAAC;IACzC;EACF;EAEA,MAAMC,GAAG,GAAG,IAAIT,KAAK,CAAC,CAAC;;EAEvB;EACAS,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;EACnBD,GAAG,CAACE,IAAI,CAAC,yBAAyB,EAAE,EAAE,EAAE,EAAE,CAAC;;EAE3C;EACAF,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;EACnBD,GAAG,CAACE,IAAI,CAAC,cAAc,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;EAExE;EACA,IAAIC,MAAM,GAAG,EAAE;;EAEf;EACA,MAAMC,WAAW,GAAG,YAAYX,aAAa,CAACY,UAAU,IAAI,GAAG,QAAQZ,aAAa,CAACa,OAAO,IAAI,GAAG,EAAE;EACrGR,GAAG,CAACE,IAAI,CAACI,WAAW,EAAE,EAAE,EAAED,MAAM,CAAC;EACjCA,MAAM,IAAI,CAAC;;EAEX;EACA,MAAMI,QAAQ,GAAG,SAASd,aAAa,CAACe,YAAY,IAAI,MAAM,EAAE;EAChEV,GAAG,CAACE,IAAI,CAACO,QAAQ,EAAE,EAAE,EAAEJ,MAAM,CAAC;EAC9BA,MAAM,IAAI,CAAC;;EAEX;EACA,IAAIV,aAAa,CAACgB,eAAe,IAAIhB,aAAa,CAACgB,eAAe,CAACd,MAAM,GAAG,CAAC,EAAE;IAC7EG,GAAG,CAACE,IAAI,CAAC,YAAYP,aAAa,CAACgB,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAEP,MAAM,CAAC;EAC9E,CAAC,MAAM;IACLL,GAAG,CAACE,IAAI,CAAC,kBAAkB,EAAE,EAAE,EAAEG,MAAM,CAAC;EAC1C;EACAA,MAAM,IAAI,CAAC;;EAEX;EACA,IAAIV,aAAa,CAACkB,UAAU,EAAE;IAC5B,MAAMC,QAAQ,GAAG,EAAE;IACnB,KAAK,MAAM,CAACC,GAAG,EAAEC,IAAI,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACvB,aAAa,CAACkB,UAAU,CAAC,EAAE;MAClE,IAAIG,IAAI,IAAIA,IAAI,CAACnB,MAAM,GAAG,CAAC,EAAE;QAC3B;QACAiB,QAAQ,CAACK,IAAI,CAAC,GAAGJ,GAAG,KAAKC,IAAI,CAACJ,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;MAC7C;IACF;IACA,IAAIE,QAAQ,CAACjB,MAAM,GAAG,CAAC,EAAE;MACvBG,GAAG,CAACE,IAAI,CAAC,SAASY,QAAQ,CAACF,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAEP,MAAM,CAAC;IACvD,CAAC,MAAM;MACLL,GAAG,CAACE,IAAI,CAAC,eAAe,EAAE,EAAE,EAAEG,MAAM,CAAC;IACvC;EACF,CAAC,MAAM;IACLL,GAAG,CAACE,IAAI,CAAC,eAAe,EAAE,EAAE,EAAEG,MAAM,CAAC;EACvC;EACAA,MAAM,IAAI,EAAE;;EAEZ;EACA,MAAMe,MAAM,GAAG1B,IAAI,CAAC2B,MAAM,CAACC,GAAG;IAAA,IAAAC,YAAA;IAAA,OAAI,EAAAA,YAAA,GAAAD,GAAG,CAACE,OAAO,cAAAD,YAAA,uBAAXA,YAAA,CAAaE,WAAW,CAAC,CAAC,MAAK,OAAO;EAAA,EAAC;EACzE,MAAMC,UAAU,GAAGhC,IAAI,CAAC2B,MAAM,CAACC,GAAG;IAAA,IAAAK,aAAA;IAAA,OAAI,EAAAA,aAAA,GAAAL,GAAG,CAACE,OAAO,cAAAG,aAAA,uBAAXA,aAAA,CAAaF,WAAW,CAAC,CAAC,MAAK,WAAW;EAAA,EAAC;;EAEjF;EACA,MAAMG,UAAU,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;IACnC,IAAIA,IAAI,CAACjC,MAAM,KAAK,CAAC,EAAE;;IAEvB;IACAG,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;IACnBD,GAAG,CAACE,IAAI,CAAC2B,MAAM,EAAE,EAAE,EAAExB,MAAM,CAAC;IAC5BA,MAAM,IAAI,CAAC;;IAEX;IACA,MAAM0B,OAAO,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC;IACxD,MAAMC,MAAM,GAAGF,IAAI,CAACG,GAAG,CAACX,GAAG,IAAI,CAC7B,IAAInB,IAAI,CAACmB,GAAG,CAACY,OAAO,CAAC,CAAC9B,kBAAkB,CAAC,OAAO,CAAC,EACjDkB,GAAG,CAACa,YAAY,EAChBb,GAAG,CAACc,MAAM,IAAI,EAAE,EAChBC,UAAU,CAACf,GAAG,CAACgB,cAAc,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAC1C,CAAC;;IAEF;IACA/C,SAAS,CAACQ,GAAG,EAAE;MACbwC,IAAI,EAAE,CAACT,OAAO,CAAC;MACfU,IAAI,EAAET,MAAM;MACZ3B,MAAM,EAAEA,MAAM;MACdqC,KAAK,EAAE,MAAM;MACbC,UAAU,EAAE;QAAEC,SAAS,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG;MAAE,CAAC;MACzCC,MAAM,EAAE;QAAEC,QAAQ,EAAE;MAAG;IACzB,CAAC,CAAC;;IAEF;IACAzC,MAAM,GAAGL,GAAG,CAAC+C,aAAa,CAACC,MAAM,GAAG,EAAE;EACxC,CAAC;;EAED;EACApB,UAAU,CAAC,QAAQ,EAAER,MAAM,CAAC;EAC5BQ,UAAU,CAAC,YAAY,EAAEF,UAAU,CAAC;;EAEpC;EACA1B,GAAG,CAACiD,IAAI,CAACrD,QAAQ,CAAC;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}