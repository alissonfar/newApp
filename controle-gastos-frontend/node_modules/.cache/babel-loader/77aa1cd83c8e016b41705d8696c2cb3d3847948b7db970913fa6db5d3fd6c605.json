{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alisson\\\\Desktop\\\\NEWAPP CONTROLE FINANCEIRO\\\\controle-gastos-frontend\\\\src\\\\pages\\\\Relatorio\\\\Relatorio.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { obterTransacoes, obterCategorias, obterTags } from '../../api.js';\nimport { exportDataToCSV } from '../../utils/export/exportData';\nimport { exportDataToPDF } from '../../utils/export/exportDataPdf';\nimport './Relatorio.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Relatorio = () => {\n  _s();\n  // Array achatado com base em pai + pagamentos\n  const [allPayments, setAllPayments] = useState([]);\n  // Resultado final após filtros\n  const [filteredRows, setFilteredRows] = useState([]);\n\n  // Filtros\n  const [dataInicio, setDataInicio] = useState('');\n  const [dataFim, setDataFim] = useState('');\n  const [selectedTipo, setSelectedTipo] = useState('both');\n  const [selectedPessoas, setSelectedPessoas] = useState([]);\n  const [categorias, setCategorias] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [tagFilters, setTagFilters] = useState({});\n\n  // Sumário aprimorado\n  const [summaryInfo, setSummaryInfo] = useState({});\n\n  // Formato de exportação\n  const [exportFormat, setExportFormat] = useState('csv');\n\n  // Estado para seleção rápida de datas\n  const [quickRange, setQuickRange] = useState('');\n\n  // 1. Carregamento inicial\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const transData = await obterTransacoes();\n        const transArray = transData.transacoes || [];\n\n        // Achatar cada transacao pai em vários registros (sem usar tags do pai)\n        const flattened = [];\n        transArray.forEach(tr => {\n          if (!tr.pagamentos || tr.pagamentos.length === 0) {\n            flattened.push({\n              parentId: tr.id,\n              dataPai: tr.data,\n              // pode ser YYYY-MM-DD ou ISO\n              tipoPai: tr.tipo,\n              descricaoPai: tr.descricao,\n              valorPai: tr.valor,\n              pessoa: null,\n              valorPagamento: 0,\n              tagsPagamento: {}\n            });\n          } else {\n            tr.pagamentos.forEach(p => {\n              flattened.push({\n                parentId: tr.id,\n                dataPai: tr.data,\n                // pode ser YYYY-MM-DD ou ISO\n                tipoPai: tr.tipo,\n                descricaoPai: tr.descricao,\n                valorPai: tr.valor,\n                pessoa: p.pessoa,\n                valorPagamento: p.valor,\n                tagsPagamento: p.tags || {}\n              });\n            });\n          }\n        });\n        setAllPayments(flattened);\n\n        // Carrega categorias e tags\n        const cats = await obterCategorias();\n        setCategorias(cats);\n        const initTagFilters = {};\n        cats.forEach(cat => {\n          initTagFilters[cat.nome] = [];\n        });\n        setTagFilters(initTagFilters);\n        const tgs = await obterTags();\n        setTags(tgs);\n      } catch (error) {\n        console.error('Erro ao carregar dados para relatório:', error);\n      }\n    }\n    fetchData();\n  }, []);\n\n  // 2. Função para formatar data sem usar new Date()\n  //    Se vier em formato ISO, corta na letra \"T\" e pega só a parte YYYY-MM-DD.\n  //    Em seguida, exibe como DD/MM/YYYY.\n  function formatDate(dateStr) {\n    if (!dateStr) return '';\n    // Se for ISO com \"T\", pegamos apenas a parte antes do \"T\"\n    const [fullDate] = dateStr.split('T'); // ex.: \"2025-02-02T00:00:00.000Z\" -> \"2025-02-02\"\n    const [year, month, day] = fullDate.split('-');\n    if (!year || !month || !day) return dateStr; // fallback\n    return `${day}/${month}/${year}`;\n  }\n\n  // 3. Distinct de pessoas\n  const distinctPessoas = rows => {\n    const pessoasSet = new Set();\n    rows.forEach(row => {\n      if (row.pessoa) {\n        pessoasSet.add(row.pessoa);\n      }\n    });\n    return Array.from(pessoasSet);\n  };\n\n  // 4. Agrupa tags por categoria (somente para exibir no filtro)\n  const tagsPorCategoria = tags.reduce((acc, tag) => {\n    if (tag.categoria) {\n      if (!acc[tag.categoria]) {\n        acc[tag.categoria] = [];\n      }\n      acc[tag.categoria].push(tag);\n    }\n    return acc;\n  }, {});\n\n  // 5. Seleção rápida de datas\n  const handleQuickDateRange = option => {\n    const now = new Date();\n    let start, end;\n    switch (option) {\n      case 'MES_ATUAL':\n        start = new Date(now.getFullYear(), now.getMonth(), 1);\n        end = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n        break;\n      case 'MES_ANTERIOR':\n        const lastMonthDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n        start = new Date(lastMonthDate.getFullYear(), lastMonthDate.getMonth(), 1);\n        end = new Date(lastMonthDate.getFullYear(), lastMonthDate.getMonth() + 1, 0);\n        break;\n      case 'ULTIMOS_60_DIAS':\n        end = now;\n        start = new Date();\n        start.setDate(start.getDate() - 60);\n        break;\n      case 'ULTIMOS_30_DIAS':\n        end = now;\n        start = new Date();\n        start.setDate(start.getDate() - 30);\n        break;\n      case 'ULTIMOS_15_DIAS':\n        end = now;\n        start = new Date();\n        start.setDate(start.getDate() - 15);\n        break;\n      case 'ULTIMOS_7_DIAS':\n        end = now;\n        start = new Date();\n        start.setDate(start.getDate() - 7);\n        break;\n      default:\n        return;\n    }\n    const toStringDate = date => {\n      const yyyy = date.getFullYear();\n      const mm = String(date.getMonth() + 1).padStart(2, '0');\n      const dd = String(date.getDate()).padStart(2, '0');\n      return `${yyyy}-${mm}-${dd}`;\n    };\n    setDataInicio(toStringDate(start));\n    setDataFim(toStringDate(end));\n  };\n\n  // 6. Filtro principal\n  const applyFilters = () => {\n    let result = [...allPayments];\n\n    // Filtro por data (pai) - assumindo dataPai como \"YYYY-MM-DD\" ou \"YYYY-MM-DDTHH...\"\n    // Podemos comparar strings somente até a parte \"YYYY-MM-DD\"\n    if (dataInicio) {\n      result = result.filter(row => {\n        const [fullDate] = row.dataPai.split('T');\n        return fullDate >= dataInicio; // ex.: \"2025-02-02\" >= \"2025-01-01\"\n      });\n    }\n    if (dataFim) {\n      result = result.filter(row => {\n        const [fullDate] = row.dataPai.split('T');\n        return fullDate <= dataFim;\n      });\n    }\n\n    // Filtro por tipo (pai)\n    if (selectedTipo !== 'both') {\n      result = result.filter(row => row.tipoPai.toLowerCase() === selectedTipo);\n    }\n\n    // Filtro por pessoas (pagamento)\n    if (selectedPessoas.length > 0) {\n      result = result.filter(row => row.pessoa && selectedPessoas.includes(row.pessoa));\n    }\n\n    // Filtro por tags (pagamento)\n    Object.keys(tagFilters).forEach(cat => {\n      const selectedTags = tagFilters[cat];\n      if (selectedTags && selectedTags.length > 0) {\n        result = result.filter(row => {\n          const pagTags = row.tagsPagamento[cat] || [];\n          const pagMatch = pagTags.some(tag => selectedTags.map(t => t.toLowerCase()).includes(tag.toLowerCase()));\n          return pagMatch;\n        });\n      }\n    });\n    setFilteredRows(result);\n  };\n\n  // 7. Recalcula o sumário toda vez que filteredRows muda\n  useEffect(() => {\n    const totalTransactions = filteredRows.length;\n    const totalValueNumber = filteredRows.reduce((acc, row) => acc + parseFloat(row.valorPagamento || 0), 0);\n    const totalValue = totalValueNumber.toFixed(2);\n    const people = distinctPessoas(filteredRows);\n    const averagePerPerson = people.length > 0 ? (totalValueNumber / people.length).toFixed(2) : '0.00';\n\n    // Cálculo diferenciado para Gastos e Recebíveis\n    const totalGastosNumber = filteredRows.filter(row => {\n      var _row$tipoPai;\n      return ((_row$tipoPai = row.tipoPai) === null || _row$tipoPai === void 0 ? void 0 : _row$tipoPai.toLowerCase()) === 'gasto';\n    }).reduce((acc, row) => acc + parseFloat(row.valorPagamento || 0), 0);\n    const totalRecebiveisNumber = filteredRows.filter(row => {\n      var _row$tipoPai2;\n      return ((_row$tipoPai2 = row.tipoPai) === null || _row$tipoPai2 === void 0 ? void 0 : _row$tipoPai2.toLowerCase()) === 'recebivel';\n    }).reduce((acc, row) => acc + parseFloat(row.valorPagamento || 0), 0);\n    const totalGastos = totalGastosNumber.toFixed(2);\n    const totalRecebiveis = totalRecebiveisNumber.toFixed(2);\n    const netValue = (totalRecebiveisNumber - totalGastosNumber).toFixed(2);\n    setSummaryInfo({\n      totalTransactions,\n      totalValue,\n      totalPeople: people.length,\n      averagePerPerson,\n      totalGastos,\n      totalRecebiveis,\n      netValue\n    });\n  }, [filteredRows]);\n\n  // 8. Exportação\n  const handleExport = () => {\n    const filterDetails = {\n      dataInicio,\n      dataFim,\n      selectedTipo,\n      selectedPessoas,\n      tagFilters\n    };\n    if (exportFormat === 'csv') {\n      exportDataToCSV(filteredRows, 'relatorio.csv');\n    } else if (exportFormat === 'pdf') {\n      exportDataToPDF(filteredRows, filterDetails, summaryInfo, 'relatorio.pdf');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relatorio-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"relatorio-title\",\n      children: \"Relat\\xF3rios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Sele\\xE7\\xE3o R\\xE1pida de Datas:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: quickRange,\n            onChange: e => {\n              const option = e.target.value;\n              setQuickRange(option);\n              handleQuickDateRange(option);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"-- Selecione --\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"MES_ATUAL\",\n              children: \"M\\xEAs Atual\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"MES_ANTERIOR\",\n              children: \"M\\xEAs Anterior\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ULTIMOS_60_DIAS\",\n              children: \"\\xDAltimos 60 Dias\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ULTIMOS_30_DIAS\",\n              children: \"\\xDAltimos 30 Dias\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ULTIMOS_15_DIAS\",\n              children: \"\\xDAltimos 15 Dias\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ULTIMOS_7_DIAS\",\n              children: \"\\xDAltimos 7 Dias\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Data In\\xEDcio (Pai):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: dataInicio,\n            onChange: e => setDataInicio(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Data Fim (Pai):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: dataFim,\n            onChange: e => setDataFim(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Pessoas (Pagamento):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            multiple: true,\n            value: selectedPessoas,\n            onChange: e => {\n              const values = Array.from(e.target.selectedOptions, option => option.value);\n              setSelectedPessoas(values);\n            },\n            children: distinctPessoas(allPayments).map((p, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: p,\n              children: p\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Tipo de Transa\\xE7\\xE3o (Pai):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedTipo,\n            onChange: e => setSelectedTipo(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"both\",\n              children: \"Ambos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gasto\",\n              children: \"Gasto\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"recebivel\",\n              children: \"Receb\\xEDvel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), categorias.map(cat => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [cat.nome, \" (Tags Pagamento):\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            multiple: true,\n            value: tagFilters[cat.nome] || [],\n            onChange: e => {\n              const selected = Array.from(e.target.selectedOptions, option => option.value);\n              setTagFilters(prev => ({\n                ...prev,\n                [cat.nome]: selected\n              }));\n            },\n            children: (tagsPorCategoria[cat.nome] || []).map(tag => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: tag.nome,\n              children: tag.nome\n            }, tag.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this)]\n        }, cat.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: applyFilters,\n            children: \"Filtrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Formato:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: exportFormat,\n            onChange: e => setExportFormat(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"csv\",\n              children: \"CSV\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"pdf\",\n              children: \"PDF\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleExport,\n            children: \"Exportar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Resumo dos Resultados\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-sections\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Informa\\xE7\\xF5es Gerais\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Total de \\u201CTransa\\xE7\\xF5es\\u201D (Pagamentos):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: summaryInfo.totalTransactions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Total em Valor:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"R$\", summaryInfo.totalValue]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"N\\xFAmero de Pessoas:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: summaryInfo.totalPeople\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"M\\xE9dia por Pessoa:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"R$\", summaryInfo.averagePerPerson]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Detalhes Financeiros\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Total de Gastos:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"R$\", summaryInfo.totalGastos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Total de Receb\\xEDveis:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"R$\", summaryInfo.totalRecebiveis]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Saldo (Receb\\xEDveis - Gastos):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"R$\", summaryInfo.netValue]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relatorio-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Resultados (\", filteredRows.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), filteredRows.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"relatorio-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Descri\\xE7\\xE3o (Pai)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Data (Pai)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Pessoa (Pagamento)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Valor (Pagamento)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Tipo (Pai)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Tags (Pagamento)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: filteredRows.map((row, idx) => {\n            // Formatamos a data manualmente, caso venha \"YYYY-MM-DDTHH:MM...\"\n            const [fullDate] = row.dataPai.split('T');\n            const [year, month, day] = fullDate.split('-') || [];\n            const displayDate = year && month && day ? `${day}/${month}/${year}` : row.dataPai; // fallback se algo estranho\n\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.descricaoPai\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: displayDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.pessoa || '—'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"R$\", parseFloat(row.valorPagamento || 0).toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.tipoPai\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: Object.keys(row.tagsPagamento || {}).map((catName, i) => row.tagsPagamento[catName].map((tagName, j) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"tag-chip relatorio-tag-chip pag-tag-chip\",\n                  children: [catName, \": \", tagName]\n                }, `pag-${i}-${j}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 27\n                }, this)))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 21\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nenhum registro encontrado.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(Relatorio, \"fCiUsWwfHfK1BCow8aBwRAc8wLE=\");\n_c = Relatorio;\nexport default Relatorio;\nvar _c;\n$RefreshReg$(_c, \"Relatorio\");","map":{"version":3,"names":["React","useEffect","useState","obterTransacoes","obterCategorias","obterTags","exportDataToCSV","exportDataToPDF","jsxDEV","_jsxDEV","Relatorio","_s","allPayments","setAllPayments","filteredRows","setFilteredRows","dataInicio","setDataInicio","dataFim","setDataFim","selectedTipo","setSelectedTipo","selectedPessoas","setSelectedPessoas","categorias","setCategorias","tags","setTags","tagFilters","setTagFilters","summaryInfo","setSummaryInfo","exportFormat","setExportFormat","quickRange","setQuickRange","fetchData","transData","transArray","transacoes","flattened","forEach","tr","pagamentos","length","push","parentId","id","dataPai","data","tipoPai","tipo","descricaoPai","descricao","valorPai","valor","pessoa","valorPagamento","tagsPagamento","p","cats","initTagFilters","cat","nome","tgs","error","console","formatDate","dateStr","fullDate","split","year","month","day","distinctPessoas","rows","pessoasSet","Set","row","add","Array","from","tagsPorCategoria","reduce","acc","tag","categoria","handleQuickDateRange","option","now","Date","start","end","getFullYear","getMonth","lastMonthDate","setDate","getDate","toStringDate","date","yyyy","mm","String","padStart","dd","applyFilters","result","filter","toLowerCase","includes","Object","keys","selectedTags","pagTags","pagMatch","some","map","t","totalTransactions","totalValueNumber","parseFloat","totalValue","toFixed","people","averagePerPerson","totalGastosNumber","_row$tipoPai","totalRecebiveisNumber","_row$tipoPai2","totalGastos","totalRecebiveis","netValue","totalPeople","handleExport","filterDetails","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","multiple","values","selectedOptions","idx","selected","prev","onClick","displayDate","catName","i","tagName","j","_c","$RefreshReg$"],"sources":["C:/Users/Alisson/Desktop/NEWAPP CONTROLE FINANCEIRO/controle-gastos-frontend/src/pages/Relatorio/Relatorio.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { obterTransacoes, obterCategorias, obterTags } from '../../api.js';\r\nimport { exportDataToCSV } from '../../utils/export/exportData';\r\nimport { exportDataToPDF } from '../../utils/export/exportDataPdf';\r\nimport './Relatorio.css';\r\n\r\nconst Relatorio = () => {\r\n  // Array achatado com base em pai + pagamentos\r\n  const [allPayments, setAllPayments] = useState([]);\r\n  // Resultado final após filtros\r\n  const [filteredRows, setFilteredRows] = useState([]);\r\n\r\n  // Filtros\r\n  const [dataInicio, setDataInicio] = useState('');\r\n  const [dataFim, setDataFim] = useState('');\r\n  const [selectedTipo, setSelectedTipo] = useState('both');\r\n  const [selectedPessoas, setSelectedPessoas] = useState([]);\r\n  const [categorias, setCategorias] = useState([]);\r\n  const [tags, setTags] = useState([]);\r\n  const [tagFilters, setTagFilters] = useState({});\r\n\r\n  // Sumário aprimorado\r\n  const [summaryInfo, setSummaryInfo] = useState({});\r\n\r\n  // Formato de exportação\r\n  const [exportFormat, setExportFormat] = useState('csv');\r\n\r\n  // Estado para seleção rápida de datas\r\n  const [quickRange, setQuickRange] = useState('');\r\n\r\n  // 1. Carregamento inicial\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const transData = await obterTransacoes();\r\n        const transArray = transData.transacoes || [];\r\n\r\n        // Achatar cada transacao pai em vários registros (sem usar tags do pai)\r\n        const flattened = [];\r\n        transArray.forEach((tr) => {\r\n          if (!tr.pagamentos || tr.pagamentos.length === 0) {\r\n            flattened.push({\r\n              parentId: tr.id,\r\n              dataPai: tr.data, // pode ser YYYY-MM-DD ou ISO\r\n              tipoPai: tr.tipo,\r\n              descricaoPai: tr.descricao,\r\n              valorPai: tr.valor,\r\n              pessoa: null,\r\n              valorPagamento: 0,\r\n              tagsPagamento: {}\r\n            });\r\n          } else {\r\n            tr.pagamentos.forEach((p) => {\r\n              flattened.push({\r\n                parentId: tr.id,\r\n                dataPai: tr.data, // pode ser YYYY-MM-DD ou ISO\r\n                tipoPai: tr.tipo,\r\n                descricaoPai: tr.descricao,\r\n                valorPai: tr.valor,\r\n                pessoa: p.pessoa,\r\n                valorPagamento: p.valor,\r\n                tagsPagamento: p.tags || {}\r\n              });\r\n            });\r\n          }\r\n        });\r\n\r\n        setAllPayments(flattened);\r\n\r\n        // Carrega categorias e tags\r\n        const cats = await obterCategorias();\r\n        setCategorias(cats);\r\n        const initTagFilters = {};\r\n        cats.forEach(cat => {\r\n          initTagFilters[cat.nome] = [];\r\n        });\r\n        setTagFilters(initTagFilters);\r\n\r\n        const tgs = await obterTags();\r\n        setTags(tgs);\r\n\r\n      } catch (error) {\r\n        console.error('Erro ao carregar dados para relatório:', error);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  // 2. Função para formatar data sem usar new Date()\r\n  //    Se vier em formato ISO, corta na letra \"T\" e pega só a parte YYYY-MM-DD.\r\n  //    Em seguida, exibe como DD/MM/YYYY.\r\n  function formatDate(dateStr) {\r\n    if (!dateStr) return '';\r\n    // Se for ISO com \"T\", pegamos apenas a parte antes do \"T\"\r\n    const [fullDate] = dateStr.split('T'); // ex.: \"2025-02-02T00:00:00.000Z\" -> \"2025-02-02\"\r\n    const [year, month, day] = fullDate.split('-');\r\n    if (!year || !month || !day) return dateStr; // fallback\r\n    return `${day}/${month}/${year}`;\r\n  }\r\n\r\n  // 3. Distinct de pessoas\r\n  const distinctPessoas = (rows) => {\r\n    const pessoasSet = new Set();\r\n    rows.forEach(row => {\r\n      if (row.pessoa) {\r\n        pessoasSet.add(row.pessoa);\r\n      }\r\n    });\r\n    return Array.from(pessoasSet);\r\n  };\r\n\r\n  // 4. Agrupa tags por categoria (somente para exibir no filtro)\r\n  const tagsPorCategoria = tags.reduce((acc, tag) => {\r\n    if (tag.categoria) {\r\n      if (!acc[tag.categoria]) {\r\n        acc[tag.categoria] = [];\r\n      }\r\n      acc[tag.categoria].push(tag);\r\n    }\r\n    return acc;\r\n  }, {});\r\n\r\n  // 5. Seleção rápida de datas\r\n  const handleQuickDateRange = (option) => {\r\n    const now = new Date();\r\n    let start, end;\r\n\r\n    switch (option) {\r\n      case 'MES_ATUAL':\r\n        start = new Date(now.getFullYear(), now.getMonth(), 1);\r\n        end = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n        break;\r\n      case 'MES_ANTERIOR':\r\n        const lastMonthDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n        start = new Date(lastMonthDate.getFullYear(), lastMonthDate.getMonth(), 1);\r\n        end = new Date(lastMonthDate.getFullYear(), lastMonthDate.getMonth() + 1, 0);\r\n        break;\r\n      case 'ULTIMOS_60_DIAS':\r\n        end = now;\r\n        start = new Date();\r\n        start.setDate(start.getDate() - 60);\r\n        break;\r\n      case 'ULTIMOS_30_DIAS':\r\n        end = now;\r\n        start = new Date();\r\n        start.setDate(start.getDate() - 30);\r\n        break;\r\n      case 'ULTIMOS_15_DIAS':\r\n        end = now;\r\n        start = new Date();\r\n        start.setDate(start.getDate() - 15);\r\n        break;\r\n      case 'ULTIMOS_7_DIAS':\r\n        end = now;\r\n        start = new Date();\r\n        start.setDate(start.getDate() - 7);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    const toStringDate = (date) => {\r\n      const yyyy = date.getFullYear();\r\n      const mm = String(date.getMonth() + 1).padStart(2, '0');\r\n      const dd = String(date.getDate()).padStart(2, '0');\r\n      return `${yyyy}-${mm}-${dd}`;\r\n    };\r\n\r\n    setDataInicio(toStringDate(start));\r\n    setDataFim(toStringDate(end));\r\n  };\r\n\r\n  // 6. Filtro principal\r\n  const applyFilters = () => {\r\n    let result = [...allPayments];\r\n\r\n    // Filtro por data (pai) - assumindo dataPai como \"YYYY-MM-DD\" ou \"YYYY-MM-DDTHH...\"\r\n    // Podemos comparar strings somente até a parte \"YYYY-MM-DD\"\r\n    if (dataInicio) {\r\n      result = result.filter(row => {\r\n        const [fullDate] = row.dataPai.split('T'); \r\n        return fullDate >= dataInicio; // ex.: \"2025-02-02\" >= \"2025-01-01\"\r\n      });\r\n    }\r\n    if (dataFim) {\r\n      result = result.filter(row => {\r\n        const [fullDate] = row.dataPai.split('T');\r\n        return fullDate <= dataFim; \r\n      });\r\n    }\r\n\r\n    // Filtro por tipo (pai)\r\n    if (selectedTipo !== 'both') {\r\n      result = result.filter(row => row.tipoPai.toLowerCase() === selectedTipo);\r\n    }\r\n\r\n    // Filtro por pessoas (pagamento)\r\n    if (selectedPessoas.length > 0) {\r\n      result = result.filter(row => row.pessoa && selectedPessoas.includes(row.pessoa));\r\n    }\r\n\r\n    // Filtro por tags (pagamento)\r\n    Object.keys(tagFilters).forEach(cat => {\r\n      const selectedTags = tagFilters[cat];\r\n      if (selectedTags && selectedTags.length > 0) {\r\n        result = result.filter(row => {\r\n          const pagTags = row.tagsPagamento[cat] || [];\r\n          const pagMatch = pagTags.some(tag =>\r\n            selectedTags.map(t => t.toLowerCase()).includes(tag.toLowerCase())\r\n          );\r\n          return pagMatch;\r\n        });\r\n      }\r\n    });\r\n\r\n    setFilteredRows(result);\r\n  };\r\n\r\n  // 7. Recalcula o sumário toda vez que filteredRows muda\r\n  useEffect(() => {\r\n    const totalTransactions = filteredRows.length;\r\n    const totalValueNumber = filteredRows.reduce(\r\n      (acc, row) => acc + parseFloat(row.valorPagamento || 0),\r\n      0\r\n    );\r\n    const totalValue = totalValueNumber.toFixed(2);\r\n\r\n    const people = distinctPessoas(filteredRows);\r\n    const averagePerPerson = people.length > 0\r\n      ? (totalValueNumber / people.length).toFixed(2)\r\n      : '0.00';\r\n\r\n    // Cálculo diferenciado para Gastos e Recebíveis\r\n    const totalGastosNumber = filteredRows\r\n      .filter(row => row.tipoPai?.toLowerCase() === 'gasto')\r\n      .reduce((acc, row) => acc + parseFloat(row.valorPagamento || 0), 0);\r\n    const totalRecebiveisNumber = filteredRows\r\n      .filter(row => row.tipoPai?.toLowerCase() === 'recebivel')\r\n      .reduce((acc, row) => acc + parseFloat(row.valorPagamento || 0), 0);\r\n\r\n    const totalGastos = totalGastosNumber.toFixed(2);\r\n    const totalRecebiveis = totalRecebiveisNumber.toFixed(2);\r\n    const netValue = (totalRecebiveisNumber - totalGastosNumber).toFixed(2);\r\n\r\n    setSummaryInfo({\r\n      totalTransactions,\r\n      totalValue,\r\n      totalPeople: people.length,\r\n      averagePerPerson,\r\n      totalGastos,\r\n      totalRecebiveis,\r\n      netValue\r\n    });\r\n  }, [filteredRows]);\r\n\r\n  // 8. Exportação\r\n  const handleExport = () => {\r\n    const filterDetails = {\r\n      dataInicio,\r\n      dataFim,\r\n      selectedTipo,\r\n      selectedPessoas,\r\n      tagFilters\r\n    };\r\n\r\n    if (exportFormat === 'csv') {\r\n      exportDataToCSV(filteredRows, 'relatorio.csv');\r\n    } else if (exportFormat === 'pdf') {\r\n      exportDataToPDF(filteredRows, filterDetails, summaryInfo, 'relatorio.pdf');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relatorio-container\">\r\n      <h2 className=\"relatorio-title\">Relatórios</h2>\r\n\r\n      <div className=\"top-section\">\r\n        {/* Painel de Filtros */}\r\n        <div className=\"filter-panel\">\r\n          {/* Seleção rápida de datas */}\r\n          <div className=\"filter-group\">\r\n            <label>Seleção Rápida de Datas:</label>\r\n            <select\r\n              value={quickRange}\r\n              onChange={e => {\r\n                const option = e.target.value;\r\n                setQuickRange(option);\r\n                handleQuickDateRange(option);\r\n              }}\r\n            >\r\n              <option value=\"\">-- Selecione --</option>\r\n              <option value=\"MES_ATUAL\">Mês Atual</option>\r\n              <option value=\"MES_ANTERIOR\">Mês Anterior</option>\r\n              <option value=\"ULTIMOS_60_DIAS\">Últimos 60 Dias</option>\r\n              <option value=\"ULTIMOS_30_DIAS\">Últimos 30 Dias</option>\r\n              <option value=\"ULTIMOS_15_DIAS\">Últimos 15 Dias</option>\r\n              <option value=\"ULTIMOS_7_DIAS\">Últimos 7 Dias</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"filter-group\">\r\n            <label>Data Início (Pai):</label>\r\n            <input\r\n              type=\"date\"\r\n              value={dataInicio}\r\n              onChange={e => setDataInicio(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"filter-group\">\r\n            <label>Data Fim (Pai):</label>\r\n            <input\r\n              type=\"date\"\r\n              value={dataFim}\r\n              onChange={e => setDataFim(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"filter-group\">\r\n            <label>Pessoas (Pagamento):</label>\r\n            <select\r\n              multiple\r\n              value={selectedPessoas}\r\n              onChange={e => {\r\n                const values = Array.from(e.target.selectedOptions, option => option.value);\r\n                setSelectedPessoas(values);\r\n              }}\r\n            >\r\n              {distinctPessoas(allPayments).map((p, idx) => (\r\n                <option key={idx} value={p}>{p}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"filter-group\">\r\n            <label>Tipo de Transação (Pai):</label>\r\n            <select value={selectedTipo} onChange={e => setSelectedTipo(e.target.value)}>\r\n              <option value=\"both\">Ambos</option>\r\n              <option value=\"gasto\">Gasto</option>\r\n              <option value=\"recebivel\">Recebível</option>\r\n            </select>\r\n          </div>\r\n\r\n          {categorias.map(cat => (\r\n            <div key={cat.id} className=\"filter-group\">\r\n              <label>{cat.nome} (Tags Pagamento):</label>\r\n              <select\r\n                multiple\r\n                value={tagFilters[cat.nome] || []}\r\n                onChange={e => {\r\n                  const selected = Array.from(e.target.selectedOptions, option => option.value);\r\n                  setTagFilters(prev => ({ ...prev, [cat.nome]: selected }));\r\n                }}\r\n              >\r\n                {(tagsPorCategoria[cat.nome] || []).map(tag => (\r\n                  <option key={tag.id} value={tag.nome}>{tag.nome}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          ))}\r\n\r\n          <div className=\"filter-group\">\r\n            <button onClick={applyFilters}>Filtrar</button>\r\n          </div>\r\n          <div className=\"filter-group\">\r\n            <label>Formato:</label>\r\n            <select value={exportFormat} onChange={e => setExportFormat(e.target.value)}>\r\n              <option value=\"csv\">CSV</option>\r\n              <option value=\"pdf\">PDF</option>\r\n            </select>\r\n            <button onClick={handleExport}>Exportar</button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Painel de Resumo */}\r\n        <div className=\"summary-panel\">\r\n          <h3>Resumo dos Resultados</h3>\r\n          <div className=\"summary-sections\">\r\n\r\n            {/* Bloco 1: informações gerais */}\r\n            <div className=\"summary-section\">\r\n              <h4>Informações Gerais</h4>\r\n              <div className=\"summary-item\">\r\n                <span>Total de “Transações” (Pagamentos):</span>\r\n                <span>{summaryInfo.totalTransactions}</span>\r\n              </div>\r\n              <div className=\"summary-item\">\r\n                <span>Total em Valor:</span>\r\n                <span>R${summaryInfo.totalValue}</span>\r\n              </div>\r\n              <div className=\"summary-item\">\r\n                <span>Número de Pessoas:</span>\r\n                <span>{summaryInfo.totalPeople}</span>\r\n              </div>\r\n              <div className=\"summary-item\">\r\n                <span>Média por Pessoa:</span>\r\n                <span>R${summaryInfo.averagePerPerson}</span>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Bloco 2: detalhes financeiros */}\r\n            <div className=\"summary-section\">\r\n              <h4>Detalhes Financeiros</h4>\r\n              <div className=\"summary-item\">\r\n                <span>Total de Gastos:</span>\r\n                <span>R${summaryInfo.totalGastos}</span>\r\n              </div>\r\n              <div className=\"summary-item\">\r\n                <span>Total de Recebíveis:</span>\r\n                <span>R${summaryInfo.totalRecebiveis}</span>\r\n              </div>\r\n              <div className=\"summary-item\">\r\n                <span>Saldo (Recebíveis - Gastos):</span>\r\n                <span>R${summaryInfo.netValue}</span>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"relatorio-results\">\r\n        <h3>Resultados ({filteredRows.length})</h3>\r\n        {filteredRows.length > 0 ? (\r\n          <table className=\"relatorio-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Descrição (Pai)</th>\r\n                <th>Data (Pai)</th>\r\n                <th>Pessoa (Pagamento)</th>\r\n                <th>Valor (Pagamento)</th>\r\n                <th>Tipo (Pai)</th>\r\n                <th>Tags (Pagamento)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredRows.map((row, idx) => {\r\n                // Formatamos a data manualmente, caso venha \"YYYY-MM-DDTHH:MM...\"\r\n                const [fullDate] = row.dataPai.split('T'); \r\n                const [year, month, day] = fullDate.split('-') || [];\r\n                const displayDate = (year && month && day)\r\n                  ? `${day}/${month}/${year}`\r\n                  : row.dataPai; // fallback se algo estranho\r\n\r\n                return (\r\n                  <tr key={idx}>\r\n                    <td>{row.descricaoPai}</td>\r\n                    <td>{displayDate}</td>\r\n                    <td>{row.pessoa || '—'}</td>\r\n                    <td>R${parseFloat(row.valorPagamento || 0).toFixed(2)}</td>\r\n                    <td>{row.tipoPai}</td>\r\n                    <td>\r\n                      {Object.keys(row.tagsPagamento || {}).map((catName, i) =>\r\n                        row.tagsPagamento[catName].map((tagName, j) => (\r\n                          <span key={`pag-${i}-${j}`} className=\"tag-chip relatorio-tag-chip pag-tag-chip\">\r\n                            {catName}: {tagName}\r\n                          </span>\r\n                        ))\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        ) : (\r\n          <p>Nenhum registro encontrado.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Relatorio;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}