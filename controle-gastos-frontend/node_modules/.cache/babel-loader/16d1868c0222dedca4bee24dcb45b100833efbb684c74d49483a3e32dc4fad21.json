{"ast":null,"code":"// src/utils/export/exportDataPdf.js\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\n/**\r\n * Exporta os dados para um arquivo PDF estruturado como um extrato bancário.\r\n * O PDF terá seções separadas para Gastos e Recebíveis, com colunas de Data, Descrição, Pessoa e Valor.\r\n * Além disso, exibe os filtros aplicados no cabeçalho.\r\n * \r\n * @param {Array} data - Array de objetos a serem exportados.\r\n * @param {Object} filterDetails - Objeto contendo detalhes dos filtros aplicados.\r\n *    Exemplo:\r\n *      {\r\n *        dataInicio: '2025-01-01',\r\n *        dataFim: '2025-02-01',\r\n *        selectedTipo: 'gasto',\r\n *        selectedPessoas: ['João', 'Maria'],\r\n *        tagFilters: { \"Categoria A\": [\"Tag1\", \"Tag2\"], \"Categoria B\": [\"Tag3\"] }\r\n *      }\r\n * @param {string} filename - Nome do arquivo PDF (padrão: 'relatorio.pdf').\r\n */\nexport function exportDataToPDF(data, filterDetails = {}, filename = 'relatorio.pdf') {\n  if (!data || data.length === 0) {\n    console.warn(\"Nenhum dado para exportar\");\n    return;\n  }\n  const doc = new jsPDF();\n\n  // Cabeçalho do documento\n  doc.setFontSize(16);\n  doc.text(\"Extrato de Transações\", 14, 20);\n  doc.setFontSize(10);\n  doc.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\n\n  // Adiciona informações dos filtros aplicados\n  let filterLines = [];\n  if (filterDetails.dataInicio || filterDetails.dataFim) {\n    filterLines.push(`Período: ${filterDetails.dataInicio || 'Início não definido'} até ${filterDetails.dataFim || 'Fim não definido'}`);\n  }\n  if (filterDetails.selectedTipo && filterDetails.selectedTipo !== 'both') {\n    filterLines.push(`Tipo: ${filterDetails.selectedTipo}`);\n  }\n  if (filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0) {\n    filterLines.push(`Pessoas: ${filterDetails.selectedPessoas.join(', ')}`);\n  }\n  if (filterDetails.tagFilters) {\n    const tagLines = Object.entries(filterDetails.tagFilters).filter(([cat, tags]) => tags && tags.length > 0).map(([cat, tags]) => `${cat}: ${tags.join(', ')}`);\n    if (tagLines.length > 0) {\n      filterLines.push(`Tags: ${tagLines.join(' | ')}`);\n    }\n  }\n  let startY = 36;\n  if (filterLines.length > 0) {\n    doc.setFontSize(10);\n    // Se passar um array de strings, o jsPDF já cria uma nova linha para cada item\n    doc.text(filterLines, 14, startY);\n    startY += filterLines.length * 6 + 4;\n  }\n\n  // Separa os dados em Gastos e Recebíveis\n  const gastos = data.filter(row => row.tipoPai.toLowerCase() === 'gasto');\n  const recebiveis = data.filter(row => row.tipoPai.toLowerCase() === 'recebivel');\n\n  // Função auxiliar para adicionar uma seção com tabela\n  const addSection = (titulo, rows) => {\n    if (rows.length === 0) return;\n\n    // Título da seção\n    doc.setFontSize(14);\n    doc.text(titulo, 14, startY);\n    startY += 6;\n\n    // Define as colunas e prepara os dados\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\n    const linhas = rows.map(row => [new Date(row.dataPai).toLocaleDateString('pt-BR'), row.descricaoPai, row.pessoa || '', parseFloat(row.valorPagamento).toFixed(2)]);\n\n    // Adiciona a tabela utilizando o autoTable\n    autoTable(doc, {\n      head: [colunas],\n      body: linhas,\n      startY: startY,\n      theme: 'grid',\n      headStyles: {\n        fillColor: [41, 128, 185]\n      },\n      styles: {\n        fontSize: 10\n      }\n    });\n    startY = doc.lastAutoTable.finalY + 10;\n  };\n  addSection(\"Gastos\", gastos);\n  addSection(\"Recebíveis\", recebiveis);\n  doc.save(filename);\n}","map":{"version":3,"names":["jsPDF","autoTable","exportDataToPDF","data","filterDetails","filename","length","console","warn","doc","setFontSize","text","Date","toLocaleDateString","filterLines","dataInicio","dataFim","push","selectedTipo","selectedPessoas","join","tagFilters","tagLines","Object","entries","filter","cat","tags","map","startY","gastos","row","tipoPai","toLowerCase","recebiveis","addSection","titulo","rows","colunas","linhas","dataPai","descricaoPai","pessoa","parseFloat","valorPagamento","toFixed","head","body","theme","headStyles","fillColor","styles","fontSize","lastAutoTable","finalY","save"],"sources":["C:/Users/Alisson/Desktop/NEWAPP CONTROLE FINANCEIRO/controle-gastos-frontend/src/utils/export/exportDataPdf.js"],"sourcesContent":["// src/utils/export/exportDataPdf.js\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\n\r\n/**\r\n * Exporta os dados para um arquivo PDF estruturado como um extrato bancário.\r\n * O PDF terá seções separadas para Gastos e Recebíveis, com colunas de Data, Descrição, Pessoa e Valor.\r\n * Além disso, exibe os filtros aplicados no cabeçalho.\r\n * \r\n * @param {Array} data - Array de objetos a serem exportados.\r\n * @param {Object} filterDetails - Objeto contendo detalhes dos filtros aplicados.\r\n *    Exemplo:\r\n *      {\r\n *        dataInicio: '2025-01-01',\r\n *        dataFim: '2025-02-01',\r\n *        selectedTipo: 'gasto',\r\n *        selectedPessoas: ['João', 'Maria'],\r\n *        tagFilters: { \"Categoria A\": [\"Tag1\", \"Tag2\"], \"Categoria B\": [\"Tag3\"] }\r\n *      }\r\n * @param {string} filename - Nome do arquivo PDF (padrão: 'relatorio.pdf').\r\n */\r\nexport function exportDataToPDF(data, filterDetails = {}, filename = 'relatorio.pdf') {\r\n  if (!data || data.length === 0) {\r\n    console.warn(\"Nenhum dado para exportar\");\r\n    return;\r\n  }\r\n\r\n  const doc = new jsPDF();\r\n\r\n  // Cabeçalho do documento\r\n  doc.setFontSize(16);\r\n  doc.text(\"Extrato de Transações\", 14, 20);\r\n  doc.setFontSize(10);\r\n  doc.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\r\n\r\n  // Adiciona informações dos filtros aplicados\r\n  let filterLines = [];\r\n  if (filterDetails.dataInicio || filterDetails.dataFim) {\r\n    filterLines.push(`Período: ${filterDetails.dataInicio || 'Início não definido'} até ${filterDetails.dataFim || 'Fim não definido'}`);\r\n  }\r\n  if (filterDetails.selectedTipo && filterDetails.selectedTipo !== 'both') {\r\n    filterLines.push(`Tipo: ${filterDetails.selectedTipo}`);\r\n  }\r\n  if (filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0) {\r\n    filterLines.push(`Pessoas: ${filterDetails.selectedPessoas.join(', ')}`);\r\n  }\r\n  if (filterDetails.tagFilters) {\r\n    const tagLines = Object.entries(filterDetails.tagFilters)\r\n      .filter(([cat, tags]) => tags && tags.length > 0)\r\n      .map(([cat, tags]) => `${cat}: ${tags.join(', ')}`);\r\n    if (tagLines.length > 0) {\r\n      filterLines.push(`Tags: ${tagLines.join(' | ')}`);\r\n    }\r\n  }\r\n\r\n  let startY = 36;\r\n  if (filterLines.length > 0) {\r\n    doc.setFontSize(10);\r\n    // Se passar um array de strings, o jsPDF já cria uma nova linha para cada item\r\n    doc.text(filterLines, 14, startY);\r\n    startY += filterLines.length * 6 + 4;\r\n  }\r\n\r\n  // Separa os dados em Gastos e Recebíveis\r\n  const gastos = data.filter(row => row.tipoPai.toLowerCase() === 'gasto');\r\n  const recebiveis = data.filter(row => row.tipoPai.toLowerCase() === 'recebivel');\r\n\r\n  // Função auxiliar para adicionar uma seção com tabela\r\n  const addSection = (titulo, rows) => {\r\n    if (rows.length === 0) return;\r\n\r\n    // Título da seção\r\n    doc.setFontSize(14);\r\n    doc.text(titulo, 14, startY);\r\n    startY += 6;\r\n\r\n    // Define as colunas e prepara os dados\r\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\r\n    const linhas = rows.map(row => [\r\n      new Date(row.dataPai).toLocaleDateString('pt-BR'),\r\n      row.descricaoPai,\r\n      row.pessoa || '',\r\n      parseFloat(row.valorPagamento).toFixed(2)\r\n    ]);\r\n\r\n    // Adiciona a tabela utilizando o autoTable\r\n    autoTable(doc, {\r\n      head: [colunas],\r\n      body: linhas,\r\n      startY: startY,\r\n      theme: 'grid',\r\n      headStyles: { fillColor: [41, 128, 185] },\r\n      styles: { fontSize: 10 }\r\n    });\r\n\r\n    startY = doc.lastAutoTable.finalY + 10;\r\n  };\r\n\r\n  addSection(\"Gastos\", gastos);\r\n  addSection(\"Recebíveis\", recebiveis);\r\n\r\n  doc.save(filename);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}