{"ast":null,"code":"// src/api.js\n\nconst API_BASE = 'http://localhost:3001/api';\nexport async function obterTransacoes(params = {}) {\n  const query = new URLSearchParams(params).toString();\n  const resposta = await fetch(`${API_BASE}/transacoes?${query}`);\n  const dados = await resposta.json();\n\n  // Mapeia _id para id\n  if (dados.transacoes) {\n    dados.transacoes = dados.transacoes.map(t => ({\n      ...t,\n      id: t._id\n    }));\n  }\n  return dados;\n}\nexport async function criarTransacao(transacao) {\n  const resposta = await fetch(`${API_BASE}/transacoes`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(transacao)\n  });\n  return await resposta.json();\n}\nexport async function atualizarTransacao(id, transacao) {\n  const resposta = await fetch(`${API_BASE}/transacoes/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(transacao)\n  });\n  return await resposta.json();\n}\nexport async function excluirTransacao(id) {\n  const resposta = await fetch(`${API_BASE}/transacoes/${id}`, {\n    method: 'DELETE'\n  });\n  return await resposta.json();\n}\nexport async function obterRelatorio() {\n  const resposta = await fetch(`${API_BASE}/relatorio`);\n  return await resposta.json();\n}\nexport async function obterTags() {\n  const resposta = await fetch(`${API_BASE}/tags`);\n  return await resposta.json();\n}\nexport async function criarTag(tag) {\n  const resposta = await fetch(`${API_BASE}/tags`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(tag)\n  });\n  return await resposta.json();\n}\nexport async function atualizarTag(id, tag) {\n  const resposta = await fetch(`${API_BASE}/tags/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(tag)\n  });\n  return await resposta.json();\n}\nexport async function excluirTag(id) {\n  const resposta = await fetch(`${API_BASE}/tags/${id}`, {\n    method: 'DELETE'\n  });\n  return await resposta.json();\n}\nexport async function obterCategorias() {\n  const resposta = await fetch(`${API_BASE}/categorias`);\n  return await resposta.json();\n}\nexport async function criarCategoria(categoria) {\n  const resposta = await fetch(`${API_BASE}/categorias`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(categoria)\n  });\n  return await resposta.json();\n}\nexport async function atualizarCategoria(id, categoria) {\n  const resposta = await fetch(`${API_BASE}/categorias/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(categoria)\n  });\n  return await resposta.json();\n}\nexport async function excluirCategoria(id) {\n  const resposta = await fetch(`${API_BASE}/categorias/${id}`, {\n    method: 'DELETE'\n  });\n  return await resposta.json();\n}","map":{"version":3,"names":["API_BASE","obterTransacoes","params","query","URLSearchParams","toString","resposta","fetch","dados","json","transacoes","map","t","id","_id","criarTransacao","transacao","method","headers","body","JSON","stringify","atualizarTransacao","excluirTransacao","obterRelatorio","obterTags","criarTag","tag","atualizarTag","excluirTag","obterCategorias","criarCategoria","categoria","atualizarCategoria","excluirCategoria"],"sources":["C:/Users/Alisson/Desktop/NEWAPP CONTROLE FINANCEIRO/controle-gastos-frontend/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\nconst API_BASE = 'http://localhost:3001/api';\r\n\r\nexport async function obterTransacoes(params = {}) {\r\n  const query = new URLSearchParams(params).toString();\r\n  const resposta = await fetch(`${API_BASE}/transacoes?${query}`);\r\n  const dados = await resposta.json();\r\n\r\n  // Mapeia _id para id\r\n  if (dados.transacoes) {\r\n    dados.transacoes = dados.transacoes.map(t => ({\r\n      ...t,\r\n      id: t._id,\r\n    }));\r\n  }\r\n\r\n  return dados;\r\n}\r\n\r\nexport async function criarTransacao(transacao) {\r\n  const resposta = await fetch(`${API_BASE}/transacoes`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(transacao)\r\n  });\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function atualizarTransacao(id, transacao) {\r\n  const resposta = await fetch(`${API_BASE}/transacoes/${id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(transacao)\r\n  });\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function excluirTransacao(id) {\r\n  const resposta = await fetch(`${API_BASE}/transacoes/${id}`, {\r\n    method: 'DELETE'\r\n  });\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function obterRelatorio() {\r\n  const resposta = await fetch(`${API_BASE}/relatorio`);\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function obterTags() {\r\n  const resposta = await fetch(`${API_BASE}/tags`);\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function criarTag(tag) {\r\n  const resposta = await fetch(`${API_BASE}/tags`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(tag)\r\n  });\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function atualizarTag(id, tag) {\r\n  const resposta = await fetch(`${API_BASE}/tags/${id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(tag)\r\n  });\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function excluirTag(id) {\r\n  const resposta = await fetch(`${API_BASE}/tags/${id}`, {\r\n    method: 'DELETE'\r\n  });\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function obterCategorias() {\r\n  const resposta = await fetch(`${API_BASE}/categorias`);\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function criarCategoria(categoria) {\r\n  const resposta = await fetch(`${API_BASE}/categorias`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(categoria)\r\n  });\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function atualizarCategoria(id, categoria) {\r\n  const resposta = await fetch(`${API_BASE}/categorias/${id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(categoria)\r\n  });\r\n  return await resposta.json();\r\n}\r\n\r\nexport async function excluirCategoria(id) {\r\n  const resposta = await fetch(`${API_BASE}/categorias/${id}`, {\r\n    method: 'DELETE'\r\n  });\r\n  return await resposta.json();\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}