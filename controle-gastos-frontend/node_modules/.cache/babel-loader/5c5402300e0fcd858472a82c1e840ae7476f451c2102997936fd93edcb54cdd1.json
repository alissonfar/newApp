{"ast":null,"code":"// src/utils/export/exportDataPdf.js\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\n/**\r\n * Exporta os dados para um arquivo PDF estruturado como um extrato bancário,\r\n * mostrando filtros e um resumo analítico, além das seções de Gastos e Recebíveis.\r\n *\r\n * @param {Array} data - Linhas filtradas (pagamentos) a serem exportadas.\r\n * @param {Object} filterDetails - Detalhes dos filtros aplicados.\r\n * @param {Object} summaryInfo - Objeto com informações analíticas (ex.: totalTransactions, totalValue, etc.).\r\n * @param {string} filename - Nome do arquivo PDF.\r\n */\nexport function exportDataToPDF(data, filterDetails = {}, summaryInfo = {}, filename = 'relatorio.pdf') {\n  if (!data || data.length === 0) {\n    console.warn(\"Nenhum dado para exportar\");\n    return;\n  }\n  const doc = new jsPDF();\n\n  // 1) Título do documento\n  doc.setFontSize(16);\n  doc.text(\"Relatório de Transações\", 14, 20);\n\n  // 2) Data de geração do PDF\n  doc.setFontSize(10);\n  doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\n\n  // 3) Exibe as informações de filtro\n  let startY = 36;\n  const periodoLine = `Período: ${filterDetails.dataInicio || '-'} até ${filterDetails.dataFim || '-'}`;\n  doc.text(periodoLine, 14, startY);\n  startY += 6;\n  const tipoLine = `Tipo: ${filterDetails.selectedTipo || 'both'}`;\n  doc.text(tipoLine, 14, startY);\n  startY += 6;\n  if (filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0) {\n    doc.text(`Pessoas: ${filterDetails.selectedPessoas.join(', ')}`, 14, startY);\n  } else {\n    doc.text(\"Pessoas: Nenhuma\", 14, startY);\n  }\n  startY += 6;\n  if (filterDetails.tagFilters) {\n    const tagLines = [];\n    for (const [cat, tags] of Object.entries(filterDetails.tagFilters)) {\n      if (tags && tags.length > 0) {\n        tagLines.push(`${cat}: ${tags.join(', ')}`);\n      }\n    }\n    if (tagLines.length > 0) {\n      doc.text(`Tags: ${tagLines.join(' | ')}`, 14, startY);\n    } else {\n      doc.text(\"Tags: Nenhuma\", 14, startY);\n    }\n  } else {\n    doc.text(\"Tags: Nenhuma\", 14, startY);\n  }\n  startY += 10;\n\n  // 4) Exibe o resumo analítico (caso exista)\n  if (summaryInfo && Object.keys(summaryInfo).length > 0) {\n    doc.setFontSize(14);\n    doc.text(\"Resumo Analítico\", 14, startY);\n    startY += 6;\n    doc.setFontSize(10);\n    // Monte as linhas que deseja exibir\n    const summaryLines = [`Total de “Transações” (Pagamentos): ${summaryInfo.totalTransactions || 0}`, `Total em Valor: R$${summaryInfo.totalValue || 0}`, `Número de Pessoas: ${summaryInfo.totalPeople || 0}`, `Média por Pessoa: R$${summaryInfo.averagePerPerson || 0}`];\n\n    // Se você quiser mais detalhes, adicione aqui (por exemplo, só de gastos, só de recebíveis, etc.)\n\n    doc.text(summaryLines, 14, startY);\n    startY += summaryLines.length * 6 + 10;\n  }\n\n  // 5) Separa os dados em Gastos e Recebíveis\n  const gastos = data.filter(row => {\n    var _row$tipoPai;\n    return ((_row$tipoPai = row.tipoPai) === null || _row$tipoPai === void 0 ? void 0 : _row$tipoPai.toLowerCase()) === 'gasto';\n  });\n  const recebiveis = data.filter(row => {\n    var _row$tipoPai2;\n    return ((_row$tipoPai2 = row.tipoPai) === null || _row$tipoPai2 === void 0 ? void 0 : _row$tipoPai2.toLowerCase()) === 'recebivel';\n  });\n\n  // Função auxiliar para criar cada seção (Gastos ou Recebíveis)\n  const addSection = (titulo, rows) => {\n    if (rows.length === 0) return;\n\n    // Título da seção\n    doc.setFontSize(14);\n    doc.text(titulo, 14, startY);\n    startY += 6;\n\n    // Define colunas e prepara os dados\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\n    const linhas = rows.map(row => [new Date(row.dataPai).toLocaleDateString('pt-BR'), row.descricaoPai, row.pessoa || '', parseFloat(row.valorPagamento).toFixed(2)]);\n\n    // Cria a tabela usando autoTable\n    autoTable(doc, {\n      head: [colunas],\n      body: linhas,\n      startY: startY,\n      theme: 'grid',\n      headStyles: {\n        fillColor: [41, 128, 185]\n      },\n      styles: {\n        fontSize: 10\n      }\n    });\n\n    // Atualiza o ponto de início para a próxima seção\n    startY = doc.lastAutoTable.finalY + 10;\n  };\n\n  // 6) Adiciona as seções\n  addSection(\"Gastos\", gastos);\n  addSection(\"Recebíveis\", recebiveis);\n\n  // 7) Salva o PDF\n  doc.save(filename);\n}","map":{"version":3,"names":["jsPDF","autoTable","exportDataToPDF","data","filterDetails","summaryInfo","filename","length","console","warn","doc","setFontSize","text","Date","toLocaleDateString","startY","periodoLine","dataInicio","dataFim","tipoLine","selectedTipo","selectedPessoas","join","tagFilters","tagLines","cat","tags","Object","entries","push","keys","summaryLines","totalTransactions","totalValue","totalPeople","averagePerPerson","gastos","filter","row","_row$tipoPai","tipoPai","toLowerCase","recebiveis","_row$tipoPai2","addSection","titulo","rows","colunas","linhas","map","dataPai","descricaoPai","pessoa","parseFloat","valorPagamento","toFixed","head","body","theme","headStyles","fillColor","styles","fontSize","lastAutoTable","finalY","save"],"sources":["C:/Users/Alisson/Desktop/NEWAPP CONTROLE FINANCEIRO/controle-gastos-frontend/src/utils/export/exportDataPdf.js"],"sourcesContent":["// src/utils/export/exportDataPdf.js\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\n\r\n/**\r\n * Exporta os dados para um arquivo PDF estruturado como um extrato bancário,\r\n * mostrando filtros e um resumo analítico, além das seções de Gastos e Recebíveis.\r\n *\r\n * @param {Array} data - Linhas filtradas (pagamentos) a serem exportadas.\r\n * @param {Object} filterDetails - Detalhes dos filtros aplicados.\r\n * @param {Object} summaryInfo - Objeto com informações analíticas (ex.: totalTransactions, totalValue, etc.).\r\n * @param {string} filename - Nome do arquivo PDF.\r\n */\r\nexport function exportDataToPDF(\r\n  data,\r\n  filterDetails = {},\r\n  summaryInfo = {},\r\n  filename = 'relatorio.pdf'\r\n) {\r\n  if (!data || data.length === 0) {\r\n    console.warn(\"Nenhum dado para exportar\");\r\n    return;\r\n  }\r\n\r\n  const doc = new jsPDF();\r\n\r\n  // 1) Título do documento\r\n  doc.setFontSize(16);\r\n  doc.text(\"Relatório de Transações\", 14, 20);\r\n\r\n  // 2) Data de geração do PDF\r\n  doc.setFontSize(10);\r\n  doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\r\n\r\n  // 3) Exibe as informações de filtro\r\n  let startY = 36;\r\n\r\n  const periodoLine = `Período: ${filterDetails.dataInicio || '-'} até ${filterDetails.dataFim || '-'}`;\r\n  doc.text(periodoLine, 14, startY);\r\n  startY += 6;\r\n\r\n  const tipoLine = `Tipo: ${filterDetails.selectedTipo || 'both'}`;\r\n  doc.text(tipoLine, 14, startY);\r\n  startY += 6;\r\n\r\n  if (filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0) {\r\n    doc.text(`Pessoas: ${filterDetails.selectedPessoas.join(', ')}`, 14, startY);\r\n  } else {\r\n    doc.text(\"Pessoas: Nenhuma\", 14, startY);\r\n  }\r\n  startY += 6;\r\n\r\n  if (filterDetails.tagFilters) {\r\n    const tagLines = [];\r\n    for (const [cat, tags] of Object.entries(filterDetails.tagFilters)) {\r\n      if (tags && tags.length > 0) {\r\n        tagLines.push(`${cat}: ${tags.join(', ')}`);\r\n      }\r\n    }\r\n    if (tagLines.length > 0) {\r\n      doc.text(`Tags: ${tagLines.join(' | ')}`, 14, startY);\r\n    } else {\r\n      doc.text(\"Tags: Nenhuma\", 14, startY);\r\n    }\r\n  } else {\r\n    doc.text(\"Tags: Nenhuma\", 14, startY);\r\n  }\r\n  startY += 10;\r\n\r\n  // 4) Exibe o resumo analítico (caso exista)\r\n  if (summaryInfo && Object.keys(summaryInfo).length > 0) {\r\n    doc.setFontSize(14);\r\n    doc.text(\"Resumo Analítico\", 14, startY);\r\n    startY += 6;\r\n\r\n    doc.setFontSize(10);\r\n    // Monte as linhas que deseja exibir\r\n    const summaryLines = [\r\n      `Total de “Transações” (Pagamentos): ${summaryInfo.totalTransactions || 0}`,\r\n      `Total em Valor: R$${summaryInfo.totalValue || 0}`,\r\n      `Número de Pessoas: ${summaryInfo.totalPeople || 0}`,\r\n      `Média por Pessoa: R$${summaryInfo.averagePerPerson || 0}`\r\n    ];\r\n\r\n    // Se você quiser mais detalhes, adicione aqui (por exemplo, só de gastos, só de recebíveis, etc.)\r\n\r\n    doc.text(summaryLines, 14, startY);\r\n    startY += summaryLines.length * 6 + 10;\r\n  }\r\n\r\n  // 5) Separa os dados em Gastos e Recebíveis\r\n  const gastos = data.filter(row => row.tipoPai?.toLowerCase() === 'gasto');\r\n  const recebiveis = data.filter(row => row.tipoPai?.toLowerCase() === 'recebivel');\r\n\r\n  // Função auxiliar para criar cada seção (Gastos ou Recebíveis)\r\n  const addSection = (titulo, rows) => {\r\n    if (rows.length === 0) return;\r\n\r\n    // Título da seção\r\n    doc.setFontSize(14);\r\n    doc.text(titulo, 14, startY);\r\n    startY += 6;\r\n\r\n    // Define colunas e prepara os dados\r\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\r\n    const linhas = rows.map(row => [\r\n      new Date(row.dataPai).toLocaleDateString('pt-BR'),\r\n      row.descricaoPai,\r\n      row.pessoa || '',\r\n      parseFloat(row.valorPagamento).toFixed(2)\r\n    ]);\r\n\r\n    // Cria a tabela usando autoTable\r\n    autoTable(doc, {\r\n      head: [colunas],\r\n      body: linhas,\r\n      startY: startY,\r\n      theme: 'grid',\r\n      headStyles: { fillColor: [41, 128, 185] },\r\n      styles: { fontSize: 10 }\r\n    });\r\n\r\n    // Atualiza o ponto de início para a próxima seção\r\n    startY = doc.lastAutoTable.finalY + 10;\r\n  };\r\n\r\n  // 6) Adiciona as seções\r\n  addSection(\"Gastos\", gastos);\r\n  addSection(\"Recebíveis\", recebiveis);\r\n\r\n  // 7) Salva o PDF\r\n  doc.save(filename);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}