{"ast":null,"code":"// src/utils/export/exportDataPdf.js\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\n/**\r\n * Exporta os dados para um arquivo PDF estruturado como um extrato bancário,\r\n * exibindo os detalhes dos filtros aplicados e um resumo analítico completo.\r\n *\r\n * @param {Array} data - Array de objetos (linhas filtradas) a serem exportados.\r\n * @param {Object} filterDetails - Detalhes dos filtros aplicados.\r\n * @param {Object} summaryInfo - Informações analíticas calculadas.\r\n * @param {string} filename - Nome do arquivo PDF (padrão: 'relatorio.pdf').\r\n */\nexport function exportDataToPDF(data, filterDetails = {}, summaryInfo = {}, filename = 'relatorio.pdf') {\n  if (!data || data.length === 0) {\n    console.warn(\"Nenhum dado para exportar\");\n    return;\n  }\n  const doc = new jsPDF();\n\n  // Título do documento\n  doc.setFontSize(16);\n  doc.text(\"Relatório de Transações\", 14, 20);\n\n  // Data de geração do PDF\n  doc.setFontSize(10);\n  doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\n  let startY = 36;\n\n  // Detalhes dos Filtros (sem referência a tags do Pai)\n  doc.setFontSize(10);\n  // Período\n  const periodoLine = `Período: ${filterDetails.dataInicio || '-'} até ${filterDetails.dataFim || '-'}`;\n  doc.text(periodoLine, 14, startY);\n  startY += 6;\n\n  // Tipo de Transação\n  const tipoLine = `Tipo: ${filterDetails.selectedTipo || 'both'}`;\n  doc.text(tipoLine, 14, startY);\n  startY += 6;\n\n  // Pessoas\n  const pessoasLine = filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0 ? `Pessoas: ${filterDetails.selectedPessoas.join(', ')}` : \"Pessoas: Nenhuma\";\n  doc.text(pessoasLine, 14, startY);\n  startY += 6;\n\n  // Tags (pagamento)\n  let tagLine = \"Tags (Pagamento): Nenhuma\";\n  if (filterDetails.tagFilters) {\n    const tagEntries = Object.entries(filterDetails.tagFilters).filter(([cat, tags]) => tags && tags.length > 0).map(([cat, tags]) => `${cat}: ${tags.join(', ')}`);\n    if (tagEntries.length > 0) {\n      tagLine = `Tags (Pagamento): ${tagEntries.join(' | ')}`;\n    }\n  }\n  doc.text(tagLine, 14, startY);\n  startY += 10;\n\n  // Resumo Analítico\n  doc.setFontSize(14);\n  doc.text(\"Resumo Analítico\", 14, startY);\n  startY += 6;\n  doc.setFontSize(10);\n  const summaryLines = [`Total de Transações (Pagamentos): ${summaryInfo.totalTransactions || 0}`, `Total em Valor: R$${summaryInfo.totalValue || '0.00'}`, `Número de Pessoas: ${summaryInfo.totalPeople || 0}`, `Média por Pessoa: R$${summaryInfo.averagePerPerson || '0.00'}`, `Total de Gastos: R$${summaryInfo.totalGastos || '0.00'}`, `Total de Recebíveis: R$${summaryInfo.totalRecebiveis || '0.00'}`, `Saldo (Recebíveis - Gastos): R$${summaryInfo.netValue || '0.00'}`];\n  doc.text(summaryLines, 14, startY);\n  startY += summaryLines.length * 6 + 10;\n\n  // Separa os dados em Gastos e Recebíveis (sem considerar tags do Pai)\n  const gastos = data.filter(row => {\n    var _row$tipoPai;\n    return ((_row$tipoPai = row.tipoPai) === null || _row$tipoPai === void 0 ? void 0 : _row$tipoPai.toLowerCase()) === 'gasto';\n  });\n  const recebiveis = data.filter(row => {\n    var _row$tipoPai2;\n    return ((_row$tipoPai2 = row.tipoPai) === null || _row$tipoPai2 === void 0 ? void 0 : _row$tipoPai2.toLowerCase()) === 'recebivel';\n  });\n\n  // Função auxiliar para adicionar uma seção com tabela\n  const addSection = (titulo, rows) => {\n    if (rows.length === 0) return;\n    doc.setFontSize(14);\n    doc.text(titulo, 14, startY);\n    startY += 6;\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\n    const linhas = rows.map(row => [new Date(row.dataPai).toLocaleDateString('pt-BR'), row.descricaoPai, row.pessoa || '', parseFloat(row.valorPagamento).toFixed(2)]);\n    autoTable(doc, {\n      head: [colunas],\n      body: linhas,\n      startY: startY,\n      theme: 'grid',\n      headStyles: {\n        fillColor: [41, 128, 185]\n      },\n      styles: {\n        fontSize: 10\n      }\n    });\n    startY = doc.lastAutoTable.finalY + 10;\n  };\n  addSection(\"Gastos\", gastos);\n  addSection(\"Recebíveis\", recebiveis);\n  doc.save(filename);\n}","map":{"version":3,"names":["jsPDF","autoTable","exportDataToPDF","data","filterDetails","summaryInfo","filename","length","console","warn","doc","setFontSize","text","Date","toLocaleDateString","startY","periodoLine","dataInicio","dataFim","tipoLine","selectedTipo","pessoasLine","selectedPessoas","join","tagLine","tagFilters","tagEntries","Object","entries","filter","cat","tags","map","summaryLines","totalTransactions","totalValue","totalPeople","averagePerPerson","totalGastos","totalRecebiveis","netValue","gastos","row","_row$tipoPai","tipoPai","toLowerCase","recebiveis","_row$tipoPai2","addSection","titulo","rows","colunas","linhas","dataPai","descricaoPai","pessoa","parseFloat","valorPagamento","toFixed","head","body","theme","headStyles","fillColor","styles","fontSize","lastAutoTable","finalY","save"],"sources":["C:/Users/Alisson/Desktop/NEWAPP CONTROLE FINANCEIRO/controle-gastos-frontend/src/utils/export/exportDataPdf.js"],"sourcesContent":["// src/utils/export/exportDataPdf.js\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\n\r\n/**\r\n * Exporta os dados para um arquivo PDF estruturado como um extrato bancário,\r\n * exibindo os detalhes dos filtros aplicados e um resumo analítico completo.\r\n *\r\n * @param {Array} data - Array de objetos (linhas filtradas) a serem exportados.\r\n * @param {Object} filterDetails - Detalhes dos filtros aplicados.\r\n * @param {Object} summaryInfo - Informações analíticas calculadas.\r\n * @param {string} filename - Nome do arquivo PDF (padrão: 'relatorio.pdf').\r\n */\r\nexport function exportDataToPDF(data, filterDetails = {}, summaryInfo = {}, filename = 'relatorio.pdf') {\r\n  if (!data || data.length === 0) {\r\n    console.warn(\"Nenhum dado para exportar\");\r\n    return;\r\n  }\r\n\r\n  const doc = new jsPDF();\r\n\r\n  // Título do documento\r\n  doc.setFontSize(16);\r\n  doc.text(\"Relatório de Transações\", 14, 20);\r\n\r\n  // Data de geração do PDF\r\n  doc.setFontSize(10);\r\n  doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\r\n\r\n  let startY = 36;\r\n\r\n  // Detalhes dos Filtros (sem referência a tags do Pai)\r\n  doc.setFontSize(10);\r\n  // Período\r\n  const periodoLine = `Período: ${filterDetails.dataInicio || '-'} até ${filterDetails.dataFim || '-'}`;\r\n  doc.text(periodoLine, 14, startY);\r\n  startY += 6;\r\n\r\n  // Tipo de Transação\r\n  const tipoLine = `Tipo: ${filterDetails.selectedTipo || 'both'}`;\r\n  doc.text(tipoLine, 14, startY);\r\n  startY += 6;\r\n\r\n  // Pessoas\r\n  const pessoasLine = filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0\r\n    ? `Pessoas: ${filterDetails.selectedPessoas.join(', ')}`\r\n    : \"Pessoas: Nenhuma\";\r\n  doc.text(pessoasLine, 14, startY);\r\n  startY += 6;\r\n\r\n  // Tags (pagamento)\r\n  let tagLine = \"Tags (Pagamento): Nenhuma\";\r\n  if (filterDetails.tagFilters) {\r\n    const tagEntries = Object.entries(filterDetails.tagFilters)\r\n      .filter(([cat, tags]) => tags && tags.length > 0)\r\n      .map(([cat, tags]) => `${cat}: ${tags.join(', ')}`);\r\n    if (tagEntries.length > 0) {\r\n      tagLine = `Tags (Pagamento): ${tagEntries.join(' | ')}`;\r\n    }\r\n  }\r\n  doc.text(tagLine, 14, startY);\r\n  startY += 10;\r\n\r\n  // Resumo Analítico\r\n  doc.setFontSize(14);\r\n  doc.text(\"Resumo Analítico\", 14, startY);\r\n  startY += 6;\r\n  doc.setFontSize(10);\r\n  const summaryLines = [\r\n    `Total de Transações (Pagamentos): ${summaryInfo.totalTransactions || 0}`,\r\n    `Total em Valor: R$${summaryInfo.totalValue || '0.00'}`,\r\n    `Número de Pessoas: ${summaryInfo.totalPeople || 0}`,\r\n    `Média por Pessoa: R$${summaryInfo.averagePerPerson || '0.00'}`,\r\n    `Total de Gastos: R$${summaryInfo.totalGastos || '0.00'}`,\r\n    `Total de Recebíveis: R$${summaryInfo.totalRecebiveis || '0.00'}`,\r\n    `Saldo (Recebíveis - Gastos): R$${summaryInfo.netValue || '0.00'}`\r\n  ];\r\n  doc.text(summaryLines, 14, startY);\r\n  startY += summaryLines.length * 6 + 10;\r\n\r\n  // Separa os dados em Gastos e Recebíveis (sem considerar tags do Pai)\r\n  const gastos = data.filter(row => row.tipoPai?.toLowerCase() === 'gasto');\r\n  const recebiveis = data.filter(row => row.tipoPai?.toLowerCase() === 'recebivel');\r\n\r\n  // Função auxiliar para adicionar uma seção com tabela\r\n  const addSection = (titulo, rows) => {\r\n    if (rows.length === 0) return;\r\n    doc.setFontSize(14);\r\n    doc.text(titulo, 14, startY);\r\n    startY += 6;\r\n\r\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\r\n    const linhas = rows.map(row => [\r\n      new Date(row.dataPai).toLocaleDateString('pt-BR'),\r\n      row.descricaoPai,\r\n      row.pessoa || '',\r\n      parseFloat(row.valorPagamento).toFixed(2)\r\n    ]);\r\n\r\n    autoTable(doc, {\r\n      head: [colunas],\r\n      body: linhas,\r\n      startY: startY,\r\n      theme: 'grid',\r\n      headStyles: { fillColor: [41, 128, 185] },\r\n      styles: { fontSize: 10 }\r\n    });\r\n\r\n    startY = doc.lastAutoTable.finalY + 10;\r\n  };\r\n\r\n  addSection(\"Gastos\", gastos);\r\n  addSection(\"Recebíveis\", recebiveis);\r\n\r\n  doc.save(filename);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}