{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alisson\\\\Desktop\\\\NEWAPP CONTROLE FINANCEIRO\\\\controle-gastos-frontend\\\\src\\\\components\\\\Transaction\\\\NovaTransacaoForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { criarTransacao, obterCategorias, obterTags } from '../../api.js';\nimport './NovaTransacaoForm.css';\n\n// Função para formatar um número em moeda BRL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatCurrency = value => {\n  const num = parseFloat(value);\n  if (isNaN(num)) return value;\n  return num.toLocaleString('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  });\n};\nconst NovaTransacaoForm = ({\n  onSuccess,\n  onClose\n}) => {\n  _s();\n  // Estados dos dados gerais\n  const [tipo, setTipo] = useState('gasto');\n  const [descricao, setDescricao] = useState('');\n  const [data, setData] = useState('');\n  const [valorTotal, setValorTotal] = useState(''); // Guarda o valor bruto, ex: \"1000\" para R$1.000,00\n\n  // Estados para sugestões (exemplo estático)\n  const descricaoSuggestions = ['Compra de pizza', 'Pagamento de conta', 'Arbitragem'];\n\n  // Estados para global tags\n  const [categorias, setCategorias] = useState([]);\n  const [tags, setTags] = useState([]);\n  // globalTags: objeto com chave = categoria e valor = array de tags selecionadas\n  const [globalTags, setGlobalTags] = useState({});\n\n  // Estados para pagamentos (sub-transações)\n  const [pagamentos, setPagamentos] = useState([{\n    pessoa: '',\n    valor: '',\n    paymentTags: {}\n  }]);\n  const pessoaSuggestions = ['Eu', 'Alisson', 'Emerson'];\n\n  // Refs para foco\n  const descricaoRef = useRef(null);\n  const dataRef = useRef(null);\n  const valorRef = useRef(null);\n\n  // Carregar categorias e tags\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const cats = await obterCategorias();\n        setCategorias(cats);\n        // Inicializa globalTags\n        const initGlobal = {};\n        cats.forEach(cat => {\n          initGlobal[cat.nome] = [];\n        });\n        setGlobalTags(initGlobal);\n        const tgs = await obterTags();\n        setTags(tgs);\n      } catch (error) {\n        console.error('Erro ao carregar categorias ou tags:', error);\n      }\n    }\n    fetchData();\n    // Define a data padrão para hoje\n    const hoje = new Date().toISOString().split('T')[0];\n    setData(hoje);\n  }, []);\n\n  // Função para agrupar tags por categoria\n  const getTagsByCategory = () => {\n    return tags.reduce((acc, tag) => {\n      if (tag.categoria) {\n        const catKey = tag.categoria;\n        if (!acc[catKey]) {\n          acc[catKey] = [];\n        }\n        acc[catKey].push(tag);\n      }\n      return acc;\n    }, {});\n  };\n  const tagsPorCategoria = getTagsByCategory();\n\n  // Atualiza a seleção global de tags\n  const handleGlobalTagChange = (categoria, selectedOptions) => {\n    setGlobalTags(prev => ({\n      ...prev,\n      [categoria]: selectedOptions\n    }));\n  };\n\n  // Funções para pagamentos\n  const handlePagamentoChange = (index, field, value) => {\n    const novosPagamentos = [...pagamentos];\n    novosPagamentos[index][field] = value;\n    setPagamentos(novosPagamentos);\n  };\n  const handlePagamentoTagChange = (index, categoria, selectedOptions) => {\n    const novosPagamentos = [...pagamentos];\n    if (!novosPagamentos[index].paymentTags) {\n      novosPagamentos[index].paymentTags = {};\n    }\n    novosPagamentos[index].paymentTags[categoria] = selectedOptions;\n    setPagamentos(novosPagamentos);\n  };\n  const addPagamento = () => {\n    setPagamentos([...pagamentos, {\n      pessoa: '',\n      valor: '',\n      paymentTags: {}\n    }]);\n  };\n  const removePagamento = index => {\n    const novosPagamentos = pagamentos.filter((_, i) => i !== index);\n    setPagamentos(novosPagamentos);\n  };\n\n  // Validação: soma dos pagamentos deve ser igual ao valor total\n  const validatePagamentos = () => {\n    const soma = pagamentos.reduce((acc, pag) => {\n      const valor = parseFloat(pag.valor.replace(/[^0-9.-]+/g, ''));\n      return acc + (isNaN(valor) ? 0 : valor);\n    }, 0);\n    return parseFloat(valorTotal.replace(/[^0-9.-]+/g, '')) === soma;\n  };\n\n  // Atalho: Ctrl+S para salvar e continuar\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.ctrlKey && e.key === 's') {\n        e.preventDefault();\n        handleSubmit(e, false);\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  });\n\n  // Botões para data\n  const setHoje = () => {\n    const hoje = new Date().toISOString().split('T')[0];\n    setData(hoje);\n  };\n  const setOntem = () => {\n    const ontem = new Date(Date.now() - 86400000).toISOString().split('T')[0];\n    setData(ontem);\n  };\n\n  // Ao alterar o valor total, se houver somente um pagamento vazio, preenche-o\n  const handleValorTotalChange = e => {\n    const raw = e.target.value;\n    setValorTotal(raw);\n    if (pagamentos.length === 1 && pagamentos[0].valor === '') {\n      handlePagamentoChange(0, 'valor', raw);\n    }\n  };\n\n  // Função de submit\n  const handleSubmit = async (e, closeModal = true) => {\n    e.preventDefault();\n    if (!validatePagamentos()) {\n      alert('A soma dos pagamentos deve ser igual ao valor total.');\n      return;\n    }\n    const novaTransacao = {\n      tipo,\n      descricao,\n      data,\n      valor: parseFloat(valorTotal.replace(/[^0-9.-]+/g, '')),\n      tags: globalTags,\n      pagamentos: pagamentos.map(pag => ({\n        pessoa: pag.pessoa,\n        valor: parseFloat(pag.valor.replace(/[^0-9.-]+/g, '')),\n        tags: pag.paymentTags\n      }))\n    };\n    try {\n      await criarTransacao(novaTransacao);\n      alert('Transação registrada com sucesso!');\n      if (onSuccess) onSuccess();\n      if (closeModal) {\n        onClose();\n      } else {\n        // Limpa os campos para continuar\n        setDescricao('');\n        setValorTotal('');\n        setGlobalTags(prev => {\n          const novo = {\n            ...prev\n          };\n          Object.keys(novo).forEach(key => novo[key] = []);\n          return novo;\n        });\n        setPagamentos([{\n          pessoa: '',\n          valor: '',\n          paymentTags: {}\n        }]);\n        if (descricaoRef.current) {\n          descricaoRef.current.focus();\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao criar transação:', error);\n      alert('Erro ao criar transação.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nova-transacao-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Nova Transa\\xE7\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleSubmit(e, true),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Tipo:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: tipo,\n              onChange: e => setTipo(e.target.value),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"gasto\",\n                children: \"Gasto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"recebivel\",\n                children: \"Receb\\xEDvel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Descri\\xE7\\xE3o:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: descricao,\n              onChange: e => setDescricao(e.target.value),\n              required: true,\n              list: \"descricao-suggestions\",\n              ref: descricaoRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n              id: \"descricao-suggestions\",\n              children: descricaoSuggestions.map((sug, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: sug\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: data,\n              onChange: e => setData(e.target.value),\n              required: true,\n              ref: dataRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"date-shortcuts\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: setHoje,\n                children: \"Hoje\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: setOntem,\n                children: \"Ontem\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Valor Total:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: valorTotal,\n              onChange: handleValorTotalChange,\n              onBlur: e => {\n                const raw = e.target.value.replace(/[^0-9.-]+/g, '');\n                const num = parseFloat(raw);\n                if (!isNaN(num)) {\n                  e.target.value = formatCurrency(num);\n                  setValorTotal(num.toString());\n                }\n              },\n              required: true,\n              ref: valorRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section global-tags\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Tags Globais\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), categorias.map(cat => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tag-dropdown-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [cat.nome, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                multiple: true,\n                value: globalTags[cat.nome] || [],\n                onChange: e => {\n                  const selected = Array.from(e.target.selectedOptions, option => option.value);\n                  handleGlobalTagChange(cat.nome, selected);\n                },\n                children: (tagsPorCategoria[cat.nome] || []).map(tag => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: tag.nome,\n                  children: tag.nome\n                }, tag.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this)]\n            }, cat.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section pagamentos-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Pagamentos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this), pagamentos.map((pagamento, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pagamento-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Pessoa:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: pagamento.pessoa,\n                  onChange: e => handlePagamentoChange(index, 'pessoa', e.target.value),\n                  required: true,\n                  list: \"pessoa-suggestions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                  id: \"pessoa-suggestions\",\n                  children: pessoaSuggestions.map((sug, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: sug\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Valor:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: pagamento.valor,\n                  onChange: e => handlePagamentoChange(index, 'valor', e.target.value),\n                  onBlur: e => {\n                    const raw = e.target.value.replace(/[^0-9.-]+/g, '');\n                    const num = parseFloat(raw);\n                    if (!isNaN(num)) {\n                      e.target.value = formatCurrency(num);\n                      handlePagamentoChange(index, 'valor', num.toString());\n                    }\n                  },\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-section payment-tags\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Tags para Pagamento\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 21\n                }, this), categorias.map(cat => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"tag-dropdown-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [cat.nome, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    multiple: true,\n                    value: pagamento.paymentTags && pagamento.paymentTags[cat.nome] || [],\n                    onChange: e => {\n                      const selected = Array.from(e.target.selectedOptions, option => option.value);\n                      handlePagamentoTagChange(index, cat.nome, selected);\n                    },\n                    children: (tagsPorCategoria[cat.nome] || []).map(tag => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: tag.nome,\n                      children: tag.nome\n                    }, tag.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 331,\n                      columnNumber: 29\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 25\n                  }, this)]\n                }, cat.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => removePagamento(index),\n                children: \"Remover Pagamento\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: addPagamento,\n              children: \"Adicionar Pagamento\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          onClick: e => handleSubmit(e, true),\n          children: \"Salvar e Fechar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"submit-btn\",\n          onClick: e => handleSubmit(e, false),\n          children: \"Salvar e Continuar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(NovaTransacaoForm, \"a3cVzAbLlINNyDdeFqdu5yJNhJ0=\");\n_c = NovaTransacaoForm;\nexport default NovaTransacaoForm;\nvar _c;\n$RefreshReg$(_c, \"NovaTransacaoForm\");","map":{"version":3,"names":["React","useEffect","useState","useRef","criarTransacao","obterCategorias","obterTags","jsxDEV","_jsxDEV","formatCurrency","value","num","parseFloat","isNaN","toLocaleString","style","currency","NovaTransacaoForm","onSuccess","onClose","_s","tipo","setTipo","descricao","setDescricao","data","setData","valorTotal","setValorTotal","descricaoSuggestions","categorias","setCategorias","tags","setTags","globalTags","setGlobalTags","pagamentos","setPagamentos","pessoa","valor","paymentTags","pessoaSuggestions","descricaoRef","dataRef","valorRef","fetchData","cats","initGlobal","forEach","cat","nome","tgs","error","console","hoje","Date","toISOString","split","getTagsByCategory","reduce","acc","tag","categoria","catKey","push","tagsPorCategoria","handleGlobalTagChange","selectedOptions","prev","handlePagamentoChange","index","field","novosPagamentos","handlePagamentoTagChange","addPagamento","removePagamento","filter","_","i","validatePagamentos","soma","pag","replace","handleKeyDown","e","ctrlKey","key","preventDefault","handleSubmit","window","addEventListener","removeEventListener","setHoje","setOntem","ontem","now","handleValorTotalChange","raw","target","length","closeModal","alert","novaTransacao","map","novo","Object","keys","current","focus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","required","type","list","ref","id","sug","idx","onClick","onBlur","toString","multiple","selected","Array","from","option","pagamento","_c","$RefreshReg$"],"sources":["C:/Users/Alisson/Desktop/NEWAPP CONTROLE FINANCEIRO/controle-gastos-frontend/src/components/Transaction/NovaTransacaoForm.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { criarTransacao, obterCategorias, obterTags } from '../../api.js';\r\nimport './NovaTransacaoForm.css';\r\n\r\n// Função para formatar um número em moeda BRL\r\nconst formatCurrency = (value) => {\r\n  const num = parseFloat(value);\r\n  if (isNaN(num)) return value;\r\n  return num.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n};\r\n\r\nconst NovaTransacaoForm = ({ onSuccess, onClose }) => {\r\n  // Estados dos dados gerais\r\n  const [tipo, setTipo] = useState('gasto');\r\n  const [descricao, setDescricao] = useState('');\r\n  const [data, setData] = useState('');\r\n  const [valorTotal, setValorTotal] = useState(''); // Guarda o valor bruto, ex: \"1000\" para R$1.000,00\r\n  \r\n  // Estados para sugestões (exemplo estático)\r\n  const descricaoSuggestions = ['Compra de pizza', 'Pagamento de conta', 'Arbitragem'];\r\n  \r\n  // Estados para global tags\r\n  const [categorias, setCategorias] = useState([]);\r\n  const [tags, setTags] = useState([]);\r\n  // globalTags: objeto com chave = categoria e valor = array de tags selecionadas\r\n  const [globalTags, setGlobalTags] = useState({});\r\n  \r\n  // Estados para pagamentos (sub-transações)\r\n  const [pagamentos, setPagamentos] = useState([\r\n    { pessoa: '', valor: '', paymentTags: {} }\r\n  ]);\r\n  const pessoaSuggestions = ['Eu', 'Alisson', 'Emerson'];\r\n  \r\n  // Refs para foco\r\n  const descricaoRef = useRef(null);\r\n  const dataRef = useRef(null);\r\n  const valorRef = useRef(null);\r\n  \r\n  // Carregar categorias e tags\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const cats = await obterCategorias();\r\n        setCategorias(cats);\r\n        // Inicializa globalTags\r\n        const initGlobal = {};\r\n        cats.forEach(cat => {\r\n          initGlobal[cat.nome] = [];\r\n        });\r\n        setGlobalTags(initGlobal);\r\n        const tgs = await obterTags();\r\n        setTags(tgs);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar categorias ou tags:', error);\r\n      }\r\n    }\r\n    fetchData();\r\n    // Define a data padrão para hoje\r\n    const hoje = new Date().toISOString().split('T')[0];\r\n    setData(hoje);\r\n  }, []);\r\n  \r\n  // Função para agrupar tags por categoria\r\n  const getTagsByCategory = () => {\r\n    return tags.reduce((acc, tag) => {\r\n      if (tag.categoria) {\r\n        const catKey = tag.categoria;\r\n        if (!acc[catKey]) {\r\n          acc[catKey] = [];\r\n        }\r\n        acc[catKey].push(tag);\r\n      }\r\n      return acc;\r\n    }, {});\r\n  };\r\n  \r\n  const tagsPorCategoria = getTagsByCategory();\r\n  \r\n  // Atualiza a seleção global de tags\r\n  const handleGlobalTagChange = (categoria, selectedOptions) => {\r\n    setGlobalTags(prev => ({\r\n      ...prev,\r\n      [categoria]: selectedOptions\r\n    }));\r\n  };\r\n  \r\n  // Funções para pagamentos\r\n  const handlePagamentoChange = (index, field, value) => {\r\n    const novosPagamentos = [...pagamentos];\r\n    novosPagamentos[index][field] = value;\r\n    setPagamentos(novosPagamentos);\r\n  };\r\n  \r\n  const handlePagamentoTagChange = (index, categoria, selectedOptions) => {\r\n    const novosPagamentos = [...pagamentos];\r\n    if (!novosPagamentos[index].paymentTags) {\r\n      novosPagamentos[index].paymentTags = {};\r\n    }\r\n    novosPagamentos[index].paymentTags[categoria] = selectedOptions;\r\n    setPagamentos(novosPagamentos);\r\n  };\r\n  \r\n  const addPagamento = () => {\r\n    setPagamentos([...pagamentos, { pessoa: '', valor: '', paymentTags: {} }]);\r\n  };\r\n  \r\n  const removePagamento = (index) => {\r\n    const novosPagamentos = pagamentos.filter((_, i) => i !== index);\r\n    setPagamentos(novosPagamentos);\r\n  };\r\n  \r\n  // Validação: soma dos pagamentos deve ser igual ao valor total\r\n  const validatePagamentos = () => {\r\n    const soma = pagamentos.reduce((acc, pag) => {\r\n      const valor = parseFloat(pag.valor.replace(/[^0-9.-]+/g, ''));\r\n      return acc + (isNaN(valor) ? 0 : valor);\r\n    }, 0);\r\n    return parseFloat(valorTotal.replace(/[^0-9.-]+/g, '')) === soma;\r\n  };\r\n  \r\n  // Atalho: Ctrl+S para salvar e continuar\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.ctrlKey && e.key === 's') {\r\n        e.preventDefault();\r\n        handleSubmit(e, false);\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  });\r\n  \r\n  // Botões para data\r\n  const setHoje = () => {\r\n    const hoje = new Date().toISOString().split('T')[0];\r\n    setData(hoje);\r\n  };\r\n  \r\n  const setOntem = () => {\r\n    const ontem = new Date(Date.now() - 86400000).toISOString().split('T')[0];\r\n    setData(ontem);\r\n  };\r\n  \r\n  // Ao alterar o valor total, se houver somente um pagamento vazio, preenche-o\r\n  const handleValorTotalChange = (e) => {\r\n    const raw = e.target.value;\r\n    setValorTotal(raw);\r\n    if (pagamentos.length === 1 && pagamentos[0].valor === '') {\r\n      handlePagamentoChange(0, 'valor', raw);\r\n    }\r\n  };\r\n  \r\n  // Função de submit\r\n  const handleSubmit = async (e, closeModal = true) => {\r\n    e.preventDefault();\r\n    if (!validatePagamentos()) {\r\n      alert('A soma dos pagamentos deve ser igual ao valor total.');\r\n      return;\r\n    }\r\n    const novaTransacao = {\r\n      tipo,\r\n      descricao,\r\n      data,\r\n      valor: parseFloat(valorTotal.replace(/[^0-9.-]+/g, '')),\r\n      tags: globalTags,\r\n      pagamentos: pagamentos.map(pag => ({\r\n        pessoa: pag.pessoa,\r\n        valor: parseFloat(pag.valor.replace(/[^0-9.-]+/g, '')),\r\n        tags: pag.paymentTags\r\n      }))\r\n    };\r\n    try {\r\n      await criarTransacao(novaTransacao);\r\n      alert('Transação registrada com sucesso!');\r\n      if (onSuccess) onSuccess();\r\n      if (closeModal) {\r\n        onClose();\r\n      } else {\r\n        // Limpa os campos para continuar\r\n        setDescricao('');\r\n        setValorTotal('');\r\n        setGlobalTags(prev => {\r\n          const novo = { ...prev };\r\n          Object.keys(novo).forEach(key => novo[key] = []);\r\n          return novo;\r\n        });\r\n        setPagamentos([{ pessoa: '', valor: '', paymentTags: {} }]);\r\n        if (descricaoRef.current) {\r\n          descricaoRef.current.focus();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao criar transação:', error);\r\n      alert('Erro ao criar transação.');\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"nova-transacao-form-container\">\r\n      <h2>Nova Transação</h2>\r\n      <form onSubmit={(e) => handleSubmit(e, true)}>\r\n        <div className=\"form-grid\">\r\n          <div className=\"left-column\">\r\n            <div className=\"form-section\">\r\n              <label>Tipo:</label>\r\n              <select value={tipo} onChange={e => setTipo(e.target.value)} required>\r\n                <option value=\"gasto\">Gasto</option>\r\n                <option value=\"recebivel\">Recebível</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"form-section\">\r\n              <label>Descrição:</label>\r\n              <input \r\n                type=\"text\" \r\n                value={descricao} \r\n                onChange={e => setDescricao(e.target.value)} \r\n                required \r\n                list=\"descricao-suggestions\"\r\n                ref={descricaoRef}\r\n              />\r\n              <datalist id=\"descricao-suggestions\">\r\n                {descricaoSuggestions.map((sug, idx) => (\r\n                  <option key={idx} value={sug} />\r\n                ))}\r\n              </datalist>\r\n            </div>\r\n            <div className=\"form-section\">\r\n              <label>Data:</label>\r\n              <input \r\n                type=\"date\" \r\n                value={data} \r\n                onChange={e => setData(e.target.value)} \r\n                required \r\n                ref={dataRef}\r\n              />\r\n              <div className=\"date-shortcuts\">\r\n                <button type=\"button\" onClick={setHoje}>Hoje</button>\r\n                <button type=\"button\" onClick={setOntem}>Ontem</button>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-section\">\r\n              <label>Valor Total:</label>\r\n              <input \r\n                type=\"text\" \r\n                value={valorTotal} \r\n                onChange={handleValorTotalChange} \r\n                onBlur={(e) => {\r\n                  const raw = e.target.value.replace(/[^0-9.-]+/g, '');\r\n                  const num = parseFloat(raw);\r\n                  if (!isNaN(num)) {\r\n                    e.target.value = formatCurrency(num);\r\n                    setValorTotal(num.toString());\r\n                  }\r\n                }}\r\n                required \r\n                ref={valorRef}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"right-column\">\r\n            <div className=\"form-section global-tags\">\r\n              <h3>Tags Globais</h3>\r\n              {categorias.map(cat => (\r\n                <div key={cat.id} className=\"tag-dropdown-group\">\r\n                  <label>{cat.nome}:</label>\r\n                  <select multiple\r\n                    value={globalTags[cat.nome] || []}\r\n                    onChange={e => {\r\n                      const selected = Array.from(e.target.selectedOptions, option => option.value);\r\n                      handleGlobalTagChange(cat.nome, selected);\r\n                    }}\r\n                  >\r\n                    {(tagsPorCategoria[cat.nome] || []).map(tag => (\r\n                      <option key={tag.id} value={tag.nome}>\r\n                        {tag.nome}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"form-section pagamentos-section\">\r\n              <h3>Pagamentos</h3>\r\n              {pagamentos.map((pagamento, index) => (\r\n                <div key={index} className=\"pagamento-item\">\r\n                  <div className=\"form-section\">\r\n                    <label>Pessoa:</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      value={pagamento.pessoa} \r\n                      onChange={e => handlePagamentoChange(index, 'pessoa', e.target.value)} \r\n                      required \r\n                      list=\"pessoa-suggestions\"\r\n                    />\r\n                    <datalist id=\"pessoa-suggestions\">\r\n                      {pessoaSuggestions.map((sug, idx) => (\r\n                        <option key={idx} value={sug} />\r\n                      ))}\r\n                    </datalist>\r\n                  </div>\r\n                  <div className=\"form-section\">\r\n                    <label>Valor:</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      value={pagamento.valor} \r\n                      onChange={e => handlePagamentoChange(index, 'valor', e.target.value)} \r\n                      onBlur={(e) => {\r\n                        const raw = e.target.value.replace(/[^0-9.-]+/g, '');\r\n                        const num = parseFloat(raw);\r\n                        if (!isNaN(num)) {\r\n                          e.target.value = formatCurrency(num);\r\n                          handlePagamentoChange(index, 'valor', num.toString());\r\n                        }\r\n                      }}\r\n                      required \r\n                    />\r\n                  </div>\r\n                  <div className=\"form-section payment-tags\">\r\n                    <h4>Tags para Pagamento</h4>\r\n                    {categorias.map(cat => (\r\n                      <div key={cat.id} className=\"tag-dropdown-group\">\r\n                        <label>{cat.nome}:</label>\r\n                        <select multiple\r\n                          value={(pagamento.paymentTags && pagamento.paymentTags[cat.nome]) || []}\r\n                          onChange={e => {\r\n                            const selected = Array.from(e.target.selectedOptions, option => option.value);\r\n                            handlePagamentoTagChange(index, cat.nome, selected);\r\n                          }}\r\n                        >\r\n                          {(tagsPorCategoria[cat.nome] || []).map(tag => (\r\n                            <option key={tag.id} value={tag.nome}>\r\n                              {tag.nome}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  <button type=\"button\" onClick={() => removePagamento(index)}>Remover Pagamento</button>\r\n                  <hr />\r\n                </div>\r\n              ))}\r\n              <button type=\"button\" onClick={addPagamento}>Adicionar Pagamento</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"form-buttons\">\r\n          <button type=\"submit\" className=\"submit-btn\" onClick={(e) => handleSubmit(e, true)}>Salvar e Fechar</button>\r\n          <button type=\"button\" className=\"submit-btn\" onClick={(e) => handleSubmit(e, false)}>Salvar e Continuar</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NovaTransacaoForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}