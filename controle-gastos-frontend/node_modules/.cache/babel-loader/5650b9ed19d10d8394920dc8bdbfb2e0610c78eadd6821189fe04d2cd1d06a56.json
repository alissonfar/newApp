{"ast":null,"code":"// src/utils/export/exportDataPdf.js\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\n/**\r\n * Exporta os dados para um arquivo PDF estruturado, exibindo:\r\n * - Filtros aplicados em uma tabela\r\n * - Resumo analítico em outra tabela\r\n * - Seções de Gastos e Recebíveis em tabelas separadas\r\n *\r\n * @param {Array} data - Array de objetos (linhas filtradas) a serem exportados.\r\n * @param {Object} filterDetails - Detalhes dos filtros aplicados.\r\n * @param {Object} summaryInfo - Informações analíticas calculadas.\r\n * @param {string} filename - Nome do arquivo PDF (padrão: 'relatorio.pdf').\r\n */\nexport function exportDataToPDF(data, filterDetails = {}, summaryInfo = {}, filename = 'relatorio.pdf') {\n  if (!data || data.length === 0) {\n    console.warn(\"Nenhum dado para exportar\");\n    return;\n  }\n  const doc = new jsPDF();\n\n  // 1) Título do documento\n  doc.setFontSize(16);\n  doc.text(\"Relatório de Transações\", 14, 20);\n\n  // Data de geração do PDF\n  doc.setFontSize(10);\n  doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\n  let startY = 36;\n\n  // ---------------------------------------------------\n  // 2) Tabela de Filtros Aplicados\n  // ---------------------------------------------------\n  doc.setFontSize(14);\n  doc.text(\"Filtros Aplicados\", 14, startY);\n  startY += 6;\n  doc.setFontSize(10);\n\n  // Monta o corpo da tabela de filtros (campo/valor)\n  const periodoLine = `${filterDetails.dataInicio || '-'} até ${filterDetails.dataFim || '-'}`;\n  const tipoLine = filterDetails.selectedTipo || 'both';\n  const pessoasLine = filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0 ? filterDetails.selectedPessoas.join(', ') : 'Nenhuma';\n  let tagLine = \"Nenhuma\";\n  if (filterDetails.tagFilters) {\n    const tagEntries = Object.entries(filterDetails.tagFilters).filter(([cat, tags]) => tags && tags.length > 0).map(([cat, tags]) => `${cat}: ${tags.join(', ')}`);\n    if (tagEntries.length > 0) {\n      tagLine = tagEntries.join(' | ');\n    }\n  }\n  const filterTableData = [[\"Período\", periodoLine], [\"Tipo (Pagamento)\", tipoLine], [\"Pessoas (Pagamento)\", pessoasLine], [\"Tags (Pagamento)\", tagLine]];\n  autoTable(doc, {\n    startY,\n    head: [[\"Campo\", \"Valor\"]],\n    body: filterTableData,\n    theme: 'grid',\n    headStyles: {\n      fillColor: [41, 128, 185],\n      // cor de fundo do cabeçalho\n      textColor: 255,\n      // cor do texto do cabeçalho (branco)\n      fontSize: 10\n    },\n    bodyStyles: {\n      fontSize: 10\n    },\n    styles: {\n      cellPadding: 3\n    }\n  });\n  startY = doc.lastAutoTable.finalY + 10;\n\n  // ---------------------------------------------------\n  // 3) Tabela de Resumo Analítico\n  // ---------------------------------------------------\n  doc.setFontSize(14);\n  doc.text(\"Resumo Analítico\", 14, startY);\n  startY += 6;\n  doc.setFontSize(10);\n  const summaryTableData = [[\"Total de Transações (Pagamentos)\", summaryInfo.totalTransactions || 0], [\"Total em Valor\", `R$${summaryInfo.totalValue || '0.00'}`], [\"Número de Pessoas\", summaryInfo.totalPeople || 0], [\"Média por Pessoa\", `R$${summaryInfo.averagePerPerson || '0.00'}`], [\"Total de Gastos\", `R$${summaryInfo.totalGastos || '0.00'}`], [\"Total de Recebíveis\", `R$${summaryInfo.totalRecebiveis || '0.00'}`], [\"Saldo (Recebíveis - Gastos)\", `R$${summaryInfo.netValue || '0.00'}`]];\n  autoTable(doc, {\n    startY,\n    head: [[\"Indicador\", \"Valor\"]],\n    body: summaryTableData,\n    theme: 'grid',\n    headStyles: {\n      fillColor: [41, 128, 185],\n      textColor: 255,\n      fontSize: 10\n    },\n    bodyStyles: {\n      fontSize: 10\n    },\n    styles: {\n      cellPadding: 3\n    }\n  });\n  startY = doc.lastAutoTable.finalY + 10;\n\n  // ---------------------------------------------------\n  // 4) Separa os dados em Gastos e Recebíveis\n  // ---------------------------------------------------\n  const gastos = data.filter(row => {\n    var _row$tipoPai;\n    return ((_row$tipoPai = row.tipoPai) === null || _row$tipoPai === void 0 ? void 0 : _row$tipoPai.toLowerCase()) === 'gasto';\n  });\n  const recebiveis = data.filter(row => {\n    var _row$tipoPai2;\n    return ((_row$tipoPai2 = row.tipoPai) === null || _row$tipoPai2 === void 0 ? void 0 : _row$tipoPai2.toLowerCase()) === 'recebivel';\n  });\n\n  // Função auxiliar para adicionar cada seção\n  const addSection = (titulo, rows) => {\n    if (rows.length === 0) return;\n    doc.setFontSize(14);\n    doc.text(titulo, 14, startY);\n    startY += 6;\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\n    const linhas = rows.map(row => [new Date(row.dataPai).toLocaleDateString('pt-BR'), row.descricaoPai, row.pessoa || '', parseFloat(row.valorPagamento).toFixed(2)]);\n    autoTable(doc, {\n      head: [colunas],\n      body: linhas,\n      startY,\n      theme: 'grid',\n      headStyles: {\n        fillColor: [41, 128, 185],\n        textColor: 255,\n        fontSize: 10\n      },\n      bodyStyles: {\n        fontSize: 10\n      },\n      styles: {\n        cellPadding: 3\n      }\n    });\n    startY = doc.lastAutoTable.finalY + 10;\n  };\n\n  // 5) Adiciona as seções de Gastos e Recebíveis\n  addSection(\"Gastos\", gastos);\n  addSection(\"Recebíveis\", recebiveis);\n\n  // 6) Salva o PDF\n  doc.save(filename);\n}","map":{"version":3,"names":["jsPDF","autoTable","exportDataToPDF","data","filterDetails","summaryInfo","filename","length","console","warn","doc","setFontSize","text","Date","toLocaleDateString","startY","periodoLine","dataInicio","dataFim","tipoLine","selectedTipo","pessoasLine","selectedPessoas","join","tagLine","tagFilters","tagEntries","Object","entries","filter","cat","tags","map","filterTableData","head","body","theme","headStyles","fillColor","textColor","fontSize","bodyStyles","styles","cellPadding","lastAutoTable","finalY","summaryTableData","totalTransactions","totalValue","totalPeople","averagePerPerson","totalGastos","totalRecebiveis","netValue","gastos","row","_row$tipoPai","tipoPai","toLowerCase","recebiveis","_row$tipoPai2","addSection","titulo","rows","colunas","linhas","dataPai","descricaoPai","pessoa","parseFloat","valorPagamento","toFixed","save"],"sources":["C:/Users/Alisson/Desktop/NEWAPP CONTROLE FINANCEIRO/controle-gastos-frontend/src/utils/export/exportDataPdf.js"],"sourcesContent":["// src/utils/export/exportDataPdf.js\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\n\r\n/**\r\n * Exporta os dados para um arquivo PDF estruturado, exibindo:\r\n * - Filtros aplicados em uma tabela\r\n * - Resumo analítico em outra tabela\r\n * - Seções de Gastos e Recebíveis em tabelas separadas\r\n *\r\n * @param {Array} data - Array de objetos (linhas filtradas) a serem exportados.\r\n * @param {Object} filterDetails - Detalhes dos filtros aplicados.\r\n * @param {Object} summaryInfo - Informações analíticas calculadas.\r\n * @param {string} filename - Nome do arquivo PDF (padrão: 'relatorio.pdf').\r\n */\r\nexport function exportDataToPDF(\r\n  data,\r\n  filterDetails = {},\r\n  summaryInfo = {},\r\n  filename = 'relatorio.pdf'\r\n) {\r\n  if (!data || data.length === 0) {\r\n    console.warn(\"Nenhum dado para exportar\");\r\n    return;\r\n  }\r\n\r\n  const doc = new jsPDF();\r\n\r\n  // 1) Título do documento\r\n  doc.setFontSize(16);\r\n  doc.text(\"Relatório de Transações\", 14, 20);\r\n\r\n  // Data de geração do PDF\r\n  doc.setFontSize(10);\r\n  doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 14, 28);\r\n\r\n  let startY = 36;\r\n\r\n  // ---------------------------------------------------\r\n  // 2) Tabela de Filtros Aplicados\r\n  // ---------------------------------------------------\r\n  doc.setFontSize(14);\r\n  doc.text(\"Filtros Aplicados\", 14, startY);\r\n  startY += 6;\r\n  doc.setFontSize(10);\r\n\r\n  // Monta o corpo da tabela de filtros (campo/valor)\r\n  const periodoLine = `${filterDetails.dataInicio || '-'} até ${filterDetails.dataFim || '-'}`;\r\n  const tipoLine = filterDetails.selectedTipo || 'both';\r\n  const pessoasLine = (filterDetails.selectedPessoas && filterDetails.selectedPessoas.length > 0)\r\n    ? filterDetails.selectedPessoas.join(', ')\r\n    : 'Nenhuma';\r\n\r\n  let tagLine = \"Nenhuma\";\r\n  if (filterDetails.tagFilters) {\r\n    const tagEntries = Object.entries(filterDetails.tagFilters)\r\n      .filter(([cat, tags]) => tags && tags.length > 0)\r\n      .map(([cat, tags]) => `${cat}: ${tags.join(', ')}`);\r\n    if (tagEntries.length > 0) {\r\n      tagLine = tagEntries.join(' | ');\r\n    }\r\n  }\r\n\r\n  const filterTableData = [\r\n    [\"Período\", periodoLine],\r\n    [\"Tipo (Pagamento)\", tipoLine],\r\n    [\"Pessoas (Pagamento)\", pessoasLine],\r\n    [\"Tags (Pagamento)\", tagLine]\r\n  ];\r\n\r\n  autoTable(doc, {\r\n    startY,\r\n    head: [[\"Campo\", \"Valor\"]],\r\n    body: filterTableData,\r\n    theme: 'grid',\r\n    headStyles: {\r\n      fillColor: [41, 128, 185], // cor de fundo do cabeçalho\r\n      textColor: 255,           // cor do texto do cabeçalho (branco)\r\n      fontSize: 10\r\n    },\r\n    bodyStyles: { fontSize: 10 },\r\n    styles: { cellPadding: 3 }\r\n  });\r\n\r\n  startY = doc.lastAutoTable.finalY + 10;\r\n\r\n  // ---------------------------------------------------\r\n  // 3) Tabela de Resumo Analítico\r\n  // ---------------------------------------------------\r\n  doc.setFontSize(14);\r\n  doc.text(\"Resumo Analítico\", 14, startY);\r\n  startY += 6;\r\n  doc.setFontSize(10);\r\n\r\n  const summaryTableData = [\r\n    [\"Total de Transações (Pagamentos)\", summaryInfo.totalTransactions || 0],\r\n    [\"Total em Valor\", `R$${summaryInfo.totalValue || '0.00'}`],\r\n    [\"Número de Pessoas\", summaryInfo.totalPeople || 0],\r\n    [\"Média por Pessoa\", `R$${summaryInfo.averagePerPerson || '0.00'}`],\r\n    [\"Total de Gastos\", `R$${summaryInfo.totalGastos || '0.00'}`],\r\n    [\"Total de Recebíveis\", `R$${summaryInfo.totalRecebiveis || '0.00'}`],\r\n    [\"Saldo (Recebíveis - Gastos)\", `R$${summaryInfo.netValue || '0.00'}`]\r\n  ];\r\n\r\n  autoTable(doc, {\r\n    startY,\r\n    head: [[\"Indicador\", \"Valor\"]],\r\n    body: summaryTableData,\r\n    theme: 'grid',\r\n    headStyles: {\r\n      fillColor: [41, 128, 185],\r\n      textColor: 255,\r\n      fontSize: 10\r\n    },\r\n    bodyStyles: { fontSize: 10 },\r\n    styles: { cellPadding: 3 }\r\n  });\r\n\r\n  startY = doc.lastAutoTable.finalY + 10;\r\n\r\n  // ---------------------------------------------------\r\n  // 4) Separa os dados em Gastos e Recebíveis\r\n  // ---------------------------------------------------\r\n  const gastos = data.filter(row => row.tipoPai?.toLowerCase() === 'gasto');\r\n  const recebiveis = data.filter(row => row.tipoPai?.toLowerCase() === 'recebivel');\r\n\r\n  // Função auxiliar para adicionar cada seção\r\n  const addSection = (titulo, rows) => {\r\n    if (rows.length === 0) return;\r\n    doc.setFontSize(14);\r\n    doc.text(titulo, 14, startY);\r\n    startY += 6;\r\n\r\n    const colunas = [\"Data\", \"Descrição\", \"Pessoa\", \"Valor\"];\r\n    const linhas = rows.map(row => [\r\n      new Date(row.dataPai).toLocaleDateString('pt-BR'),\r\n      row.descricaoPai,\r\n      row.pessoa || '',\r\n      parseFloat(row.valorPagamento).toFixed(2)\r\n    ]);\r\n\r\n    autoTable(doc, {\r\n      head: [colunas],\r\n      body: linhas,\r\n      startY,\r\n      theme: 'grid',\r\n      headStyles: {\r\n        fillColor: [41, 128, 185],\r\n        textColor: 255,\r\n        fontSize: 10\r\n      },\r\n      bodyStyles: { fontSize: 10 },\r\n      styles: { cellPadding: 3 }\r\n    });\r\n\r\n    startY = doc.lastAutoTable.finalY + 10;\r\n  };\r\n\r\n  // 5) Adiciona as seções de Gastos e Recebíveis\r\n  addSection(\"Gastos\", gastos);\r\n  addSection(\"Recebíveis\", recebiveis);\r\n\r\n  // 6) Salva o PDF\r\n  doc.save(filename);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}